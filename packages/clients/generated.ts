// Generated by @wagmi/cli@1.3.0 on 10/20/2023 at 12:20:57 AM
import {
  useContractRead,
  useContractWrite,
  usePrepareContractWrite,
  useContractEvent,
} from 'wagmi'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Account
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_guardian', internalType: 'address', type: 'address' },
      { name: 'entryPoint_', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AccountLocked' },
  { type: 'error', inputs: [], name: 'ExceedsMaxLockTime' },
  { type: 'error', inputs: [], name: 'InvalidInput' },
  { type: 'error', inputs: [], name: 'NotAuthorized' },
  { type: 'error', inputs: [], name: 'OwnershipCycle' },
  { type: 'error', inputs: [], name: 'UntrustedImplementation' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'lockedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LockUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'selector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OverrideUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'hasPermission',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'PermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_entryPoint',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'executeCall',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'guardian',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_lockedUntil', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lock',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedUntil',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'receivedTokenId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'overrides',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'permissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
      { name: 'implementations', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setOverrides',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callers', internalType: 'address[]', type: 'address[]' },
      { name: '_permissions', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'setPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArtAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const artAccountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_artTable', internalType: 'address', type: 'address' },
      { name: '_guardian', internalType: 'address', type: 'address' },
      { name: '_entryPoint', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AccountLocked' },
  { type: 'error', inputs: [], name: 'ExceedsMaxLockTime' },
  { type: 'error', inputs: [], name: 'InvalidInput' },
  { type: 'error', inputs: [], name: 'NotAuthorized' },
  { type: 'error', inputs: [], name: 'OwnershipCycle' },
  { type: 'error', inputs: [], name: 'UntrustedImplementation' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'lockedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LockUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'selector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OverrideUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'hasPermission',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'PermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_entryPoint',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'approveTransfer',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'artTable',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'completeTransfer',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'executeCall',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'guardian',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_nfcId', internalType: 'string', type: 'string' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_lockedUntil', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lock',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedUntil',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nfcId',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'receivedTokenId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'overrides',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'permissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
      { name: 'implementations', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setOverrides',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callers', internalType: 'address[]', type: 'address[]' },
      { name: '_permissions', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'setPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startTransfer',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'update',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArtRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const artRegistryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'artTable', internalType: 'address', type: 'address' },
      {
        name: 'artAccountImplementation',
        internalType: 'address',
        type: 'address',
      },
      { name: 'nfcRegistry', internalType: 'address', type: 'address' },
      {
        name: 'goodTransferResolver',
        internalType: 'address',
        type: 'address',
      },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burnArt',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'house', internalType: 'address', type: 'address' },
      { name: 'nfcId', internalType: 'string', type: 'string' },
      { name: 'metadata', internalType: 'string', type: 'string' },
    ],
    name: 'registerArt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferArt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArtTable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const artTableABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
    name: 'ChainNotSupported',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'string', type: 'string' }],
    name: 'insertIntoTable',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'controller', internalType: 'address', type: 'address' }],
    name: 'setAccessControl',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'string', type: 'string' }],
    name: 'updateTable',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseAccountABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CounterScript
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterScriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CounterTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'counter',
    outputs: [{ name: '', internalType: 'contract Counter', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaces',
    outputs: [
      {
        name: 'targetedInterfaces_',
        internalType: 'struct StdInvariant.FuzzInterface[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'artifacts', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'testIncrement',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'x', internalType: 'uint256', type: 'uint256' }],
    name: 'testSetNumber',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EASLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const easLibABI = [{ type: 'error', inputs: [], name: 'InvalidChainId' }]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Upgrade
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GoodTransferResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const goodTransferResolverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'easAddrs', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'AccessDenied' },
  { type: 'error', inputs: [], name: 'InsufficientValue' },
  { type: 'error', inputs: [], name: 'InvalidEAS' },
  { type: 'error', inputs: [], name: 'NotPayable' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'attest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'isPayable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiAttest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiRevoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'revoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'payable', type: 'receive' },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HouseAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const houseAccountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_houseTable', internalType: 'address', type: 'address' },
      { name: '_guardian', internalType: 'address', type: 'address' },
      { name: '_entryPoint', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AccountLocked' },
  { type: 'error', inputs: [], name: 'ExceedsMaxLockTime' },
  { type: 'error', inputs: [], name: 'InvalidInput' },
  { type: 'error', inputs: [], name: 'NotAuthorized' },
  { type: 'error', inputs: [], name: 'OwnershipCycle' },
  { type: 'error', inputs: [], name: 'UntrustedImplementation' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'lockedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LockUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'selector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OverrideUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'hasPermission',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'PermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_entryPoint',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'executeCall',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'guardian',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'houseTable',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_lockedUntil', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lock',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedUntil',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'receivedTokenId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'overrides',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'permissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
      { name: 'implementations', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setOverrides',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callers', internalType: 'address[]', type: 'address[]' },
      { name: '_permissions', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'setPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'update',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HouseRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const houseRegistryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'houseTable', internalType: 'address', type: 'address' },
      {
        name: 'houseAccountImplementation',
        internalType: 'address',
        type: 'address',
      },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'createHouse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyHouse',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HouseTable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const houseTableABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
    name: 'ChainNotSupported',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'string', type: 'string' }],
    name: 'insertIntoTable',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'string', type: 'string' }],
    name: 'updateTable',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccountGuardian
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccountGuardianABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'isTrustedExecutor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'isTrustedImplementation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'executor', internalType: 'address', type: 'address' },
      { name: 'trusted', internalType: 'bool', type: 'bool' },
    ],
    name: 'setTrustedExecutor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'trusted', internalType: 'bool', type: 'bool' },
    ],
    name: 'setTrustedImplementation',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAggregator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAggregatorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOps',
        internalType: 'struct UserOperation[]',
        type: 'tuple[]',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregateSignatures',
    outputs: [
      { name: 'aggregatedSignature', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOps',
        internalType: 'struct UserOperation[]',
        type: 'tuple[]',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'validateSignatures',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'validateUserOpSignature',
    outputs: [{ name: 'sigForUserOp', internalType: 'bytes', type: 'bytes' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeacon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1271
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1271ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC6551Registry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc6551RegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'chainId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'tokenContract',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'salt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccountCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'account',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'seed', internalType: 'uint256', type: 'uint256' },
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC6551Account
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc6551AccountABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionExecuted',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'executeCall',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC6551AccountProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc6551AccountProxyABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEntryPoint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iEntryPointABI = [
  {
    type: 'error',
    inputs: [
      { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
      { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
      { name: 'targetSuccess', internalType: 'bool', type: 'bool' },
      { name: 'targetResult', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'ExecutionResult',
  },
  {
    type: 'error',
    inputs: [
      { name: 'opIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'FailedOp',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'SenderAddressResult',
  },
  {
    type: 'error',
    inputs: [{ name: 'aggregator', internalType: 'address', type: 'address' }],
    name: 'SignatureValidationFailed',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'returnInfo',
        internalType: 'struct IEntryPoint.ReturnInfo',
        type: 'tuple',
        components: [
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'sigFailed', internalType: 'bool', type: 'bool' },
          { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
          { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
          { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'senderInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'factoryInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'paymasterInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'ValidationResult',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'returnInfo',
        internalType: 'struct IEntryPoint.ReturnInfo',
        type: 'tuple',
        components: [
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'sigFailed', internalType: 'bool', type: 'bool' },
          { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
          { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
          { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'senderInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'factoryInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'paymasterInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'aggregatorInfo',
        internalType: 'struct IEntryPoint.AggregatorStakeInfo',
        type: 'tuple',
        components: [
          { name: 'aggregator', internalType: 'address', type: 'address' },
          {
            name: 'stakeInfo',
            internalType: 'struct IStakeManager.StakeInfo',
            type: 'tuple',
            components: [
              { name: 'stake', internalType: 'uint256', type: 'uint256' },
              {
                name: 'unstakeDelaySec',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
        ],
      },
    ],
    name: 'ValidationResultWithAggregation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'factory',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AccountDeployed',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'BeforeExecution' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalDeposit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'aggregator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SignatureAggregatorChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalStaked',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unstakeDelaySec',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeLocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'actualGasCost',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actualGasUsed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UserOperationEvent',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'revertReason',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'UserOperationRevertReason',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'depositTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getDepositInfo',
    outputs: [
      {
        name: 'info',
        internalType: 'struct IStakeManager.DepositInfo',
        type: 'tuple',
        components: [
          { name: 'deposit', internalType: 'uint112', type: 'uint112' },
          { name: 'staked', internalType: 'bool', type: 'bool' },
          { name: 'stake', internalType: 'uint112', type: 'uint112' },
          { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
          { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'key', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'initCode', internalType: 'bytes', type: 'bytes' }],
    name: 'getSenderAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'getUserOpHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'opsPerAggregator',
        internalType: 'struct IEntryPoint.UserOpsPerAggregator[]',
        type: 'tuple[]',
        components: [
          {
            name: 'userOps',
            internalType: 'struct UserOperation[]',
            type: 'tuple[]',
            components: [
              { name: 'sender', internalType: 'address', type: 'address' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              { name: 'initCode', internalType: 'bytes', type: 'bytes' },
              { name: 'callData', internalType: 'bytes', type: 'bytes' },
              {
                name: 'callGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'verificationGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'preVerificationGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'paymasterAndData',
                internalType: 'bytes',
                type: 'bytes',
              },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'aggregator',
            internalType: 'contract IAggregator',
            type: 'address',
          },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'handleAggregatedOps',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct UserOperation[]',
        type: 'tuple[]',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'handleOps',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'uint192', type: 'uint192' }],
    name: 'incrementNonce',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'op',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetCallData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateHandleOp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'simulateValidation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INonceManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iNonceManagerABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'key', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'uint192', type: 'uint192' }],
    name: 'incrementNonce',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISchemaRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSchemaRegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'uid', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'registerer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Registered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'uid', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getSchema',
    outputs: [
      {
        name: '',
        internalType: 'struct SchemaRecord',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'resolver',
            internalType: 'contract ISchemaResolver',
            type: 'address',
          },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'schema', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'schema', internalType: 'string', type: 'string' },
      {
        name: 'resolver',
        internalType: 'contract ISchemaResolver',
        type: 'address',
      },
      { name: 'revocable', internalType: 'bool', type: 'bool' },
    ],
    name: 'register',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IStakeManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iStakeManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalDeposit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalStaked',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unstakeDelaySec',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeLocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'depositTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getDepositInfo',
    outputs: [
      {
        name: 'info',
        internalType: 'struct IStakeManager.DepositInfo',
        type: 'tuple',
        components: [
          { name: 'deposit', internalType: 'uint112', type: 'uint112' },
          { name: 'staked', internalType: 'bool', type: 'bool' },
          { name: 'stake', internalType: 'uint112', type: 'uint112' },
          { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
          { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MemberAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const memberAccountABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_memberTable', internalType: 'address', type: 'address' },
      { name: '_guardian', internalType: 'address', type: 'address' },
      { name: '_entryPoint', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AccountLocked' },
  { type: 'error', inputs: [], name: 'ExceedsMaxLockTime' },
  { type: 'error', inputs: [], name: 'InvalidInput' },
  { type: 'error', inputs: [], name: 'NotAuthorized' },
  { type: 'error', inputs: [], name: 'OwnershipCycle' },
  { type: 'error', inputs: [], name: 'UntrustedImplementation' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'lockedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LockUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'selector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OverrideUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'hasPermission',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'PermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_entryPoint',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createHouse',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'executeCall',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'guardian',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_lockedUntil', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lock',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedUntil',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_description', internalType: 'string', type: 'string' },
    ],
    name: 'makeProposal',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'memberTable',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'receivedTokenId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'overrides',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'permissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_vote', internalType: 'enum MemberAccount.Vote', type: 'uint8' },
    ],
    name: 'proposalVote',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'resgisterArt',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
      { name: 'implementations', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setOverrides',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callers', internalType: 'address[]', type: 'address[]' },
      { name: '_permissions', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'setPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'update',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MemberRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const memberRegistryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'memberTable', internalType: 'address', type: 'address' },
      {
        name: 'memberAccountImplementation',
        internalType: 'address',
        type: 'address',
      },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'createMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MemberTable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const memberTableABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
    name: 'ChainNotSupported',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'string', type: 'string' }],
    name: 'insertIntoTable',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'string', type: 'string' }],
    name: 'updateTable',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NFCRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nfcRegistryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_initialOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'nfcIdToIssuer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'nfcId', internalType: 'string', type: 'string' }],
    name: 'registerNFC',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OpScript
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const opScriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PolygonMumbaiScript
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const polygonMumbaiScriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SchemaResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const schemaResolverABI = [
  { type: 'error', inputs: [], name: 'AccessDenied' },
  { type: 'error', inputs: [], name: 'InsufficientValue' },
  { type: 'error', inputs: [], name: 'InvalidEAS' },
  { type: 'error', inputs: [], name: 'NotPayable' },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'attest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'isPayable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiAttest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiRevoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'revoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'payable', type: 'receive' },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Script
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const scriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Semver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'major', internalType: 'uint256', type: 'uint256' },
      { name: 'minor', internalType: 'uint256', type: 'uint256' },
      { name: 'patch', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ScrollSepoliaScript
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const scrollSepoliaScriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdAssertions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdAssertionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaces',
    outputs: [
      {
        name: 'targetedInterfaces_',
        internalType: 'struct StdInvariant.FuzzInterface[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'artifacts', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stdError
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdErrorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'arithmeticError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'assertionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'divisionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'encodeStorageError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'enumConversionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'indexOOBError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'memOverflowError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'popError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'zeroVarError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stdStorageSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdStorageSafeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: false },
      { name: 'fsig', internalType: 'bytes4', type: 'bytes4', indexed: false },
      {
        name: 'keysHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'slot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SlotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'slot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WARNING_UninitedSlot',
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TablelandDeployments
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tablelandDeploymentsABI = [
  {
    type: 'error',
    inputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
    name: 'ChainNotSupported',
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TBALib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tbaLibABI = [{ type: 'error', inputs: [], name: 'InvalidChainId' }]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vm
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'readSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writeSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'activeFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'allowCheatcodes',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'condition', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'char', internalType: 'string', type: 'string' }],
    name: 'breakpoint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'char', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'breakpoint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newChainId', internalType: 'uint256', type: 'uint256' }],
    name: 'chainId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'clearMockedCalls',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newCoinbase', internalType: 'address', type: 'address' }],
    name: 'coinbase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'string', type: 'string' },
      { name: 'to', internalType: 'string', type: 'string' },
    ],
    name: 'copyFile',
    outputs: [{ name: 'copied', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'recursive', internalType: 'bool', type: 'bool' },
    ],
    name: 'createDir',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'urlOrAlias', internalType: 'string', type: 'string' }],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'urlOrAlias', internalType: 'string', type: 'string' }],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'walletLabel', internalType: 'string', type: 'string' }],
    name: 'createWallet',
    outputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'createWallet',
    outputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'walletLabel', internalType: 'string', type: 'string' },
    ],
    name: 'createWallet',
    outputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deal',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'derivationPath', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newDifficulty', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'difficulty',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool', type: 'bool' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address', type: 'address' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256', type: 'int256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string', type: 'string' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'newRuntimeBytecode', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'etch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'exists',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'gas', internalType: 'uint64', type: 'uint64' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'gas', internalType: 'uint64', type: 'uint64' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'count', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'count', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'count', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'minGas', internalType: 'uint64', type: 'uint64' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCallMinGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'minGas', internalType: 'uint64', type: 'uint64' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'count', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectCallMinGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'checkTopic1', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic2', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic3', internalType: 'bool', type: 'bool' },
      { name: 'checkData', internalType: 'bool', type: 'bool' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'checkTopic1', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic2', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic3', internalType: 'bool', type: 'bool' },
      { name: 'checkData', internalType: 'bool', type: 'bool' },
      { name: 'emitter', internalType: 'address', type: 'address' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'emitter', internalType: 'address', type: 'address' }],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'revertData', internalType: 'bytes4', type: 'bytes4' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'revertData', internalType: 'bytes', type: 'bytes' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'min', internalType: 'uint64', type: 'uint64' },
      { name: 'max', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectSafeMemory',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'min', internalType: 'uint64', type: 'uint64' },
      { name: 'max', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectSafeMemoryCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBasefee', internalType: 'uint256', type: 'uint256' }],
    name: 'fee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandInput', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'ffi',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'fsMetadata',
    outputs: [
      {
        name: 'metadata',
        internalType: 'struct VmSafe.FsMetadata',
        type: 'tuple',
        components: [
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
          { name: 'length', internalType: 'uint256', type: 'uint256' },
          { name: 'readOnly', internalType: 'bool', type: 'bool' },
          { name: 'modified', internalType: 'uint256', type: 'uint256' },
          { name: 'accessed', internalType: 'uint256', type: 'uint256' },
          { name: 'created', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [
      { name: 'creationBytecode', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [
      { name: 'runtimeBytecode', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getLabel',
    outputs: [{ name: 'currentLabel', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'elementSlot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getMappingKeyAndParentOf',
    outputs: [
      { name: 'found', internalType: 'bool', type: 'bool' },
      { name: 'key', internalType: 'bytes32', type: 'bytes32' },
      { name: 'parent', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'mappingSlot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getMappingLength',
    outputs: [{ name: 'length', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'mappingSlot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'idx', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMappingSlotAt',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: 'logs',
        internalType: 'struct VmSafe.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'emitter', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'isDir',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'isFile',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isPersistent',
    outputs: [{ name: 'persistent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'keyExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newLabel', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account0', internalType: 'address', type: 'address' },
      { name: 'account1', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account0', internalType: 'address', type: 'address' },
      { name: 'account1', internalType: 'address', type: 'address' },
      { name: 'account2', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'revertData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCallRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'revertData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCallRevert',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseAddress',
    outputs: [
      { name: 'parsedValue', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBool',
    outputs: [{ name: 'parsedValue', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBytes',
    outputs: [{ name: 'parsedValue', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBytes32',
    outputs: [
      { name: 'parsedValue', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseInt',
    outputs: [{ name: 'parsedValue', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'json', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddressArray',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBoolArray',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32Array',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytesArray',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonIntArray',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonKeys',
    outputs: [{ name: 'keys', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonStringArray',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUintArray',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseUint',
    outputs: [
      { name: 'parsedValue', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pauseGasMetering',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'msgSender', internalType: 'address', type: 'address' },
      { name: 'txOrigin', internalType: 'address', type: 'address' },
    ],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'msgSender', internalType: 'address', type: 'address' }],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newPrevrandao', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'prevrandao',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: 'path', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'readCallers',
    outputs: [
      {
        name: 'callerMode',
        internalType: 'enum VmSafe.CallerMode',
        type: 'uint8',
      },
      { name: 'msgSender', internalType: 'address', type: 'address' },
      { name: 'txOrigin', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'maxDepth', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'maxDepth', internalType: 'uint64', type: 'uint64' },
      { name: 'followLinks', internalType: 'bool', type: 'bool' },
    ],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: 'data', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: 'line', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'linkPath', internalType: 'string', type: 'string' }],
    name: 'readLink',
    outputs: [{ name: 'targetPath', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'record',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recordLogs',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'recursive', internalType: 'bool', type: 'bool' },
    ],
    name: 'removeDir',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'resetNonce',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'resumeGasMetering',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snapshotId', internalType: 'uint256', type: 'uint256' }],
    name: 'revertTo',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newHeight', internalType: 'uint256', type: 'uint256' }],
    name: 'roll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'txHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'rpcAlias', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrlStructs',
    outputs: [
      {
        name: 'urls',
        internalType: 'struct VmSafe.Rpc[]',
        type: 'tuple[]',
        components: [
          { name: 'key', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [
      { name: 'urls', internalType: 'string[2][]', type: 'string[2][]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
    name: 'selectFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'address', type: 'address' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'int256', type: 'int256' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'serializeJson',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newNonce', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setNonce',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newNonce', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setNonceUnsafe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'digest', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'digest', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'skipTest', internalType: 'bool', type: 'bool' }],
    name: 'skip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'duration', internalType: 'uint256', type: 'uint256' }],
    name: 'sleep',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'snapshot',
    outputs: [{ name: 'snapshotId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startMappingRecording',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'msgSender', internalType: 'address', type: 'address' }],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'msgSender', internalType: 'address', type: 'address' },
      { name: 'txOrigin', internalType: 'address', type: 'address' },
    ],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopMappingRecording',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'store',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'txHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandInput', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'tryFfi',
    outputs: [
      {
        name: 'result',
        internalType: 'struct VmSafe.FfiResult',
        type: 'tuple',
        components: [
          { name: 'exitCode', internalType: 'int32', type: 'int32' },
          { name: 'stdout', internalType: 'bytes', type: 'bytes' },
          { name: 'stderr', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newGasPrice', internalType: 'uint256', type: 'uint256' }],
    name: 'txGasPrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unixTime',
    outputs: [
      { name: 'milliseconds', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'warp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VmSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmSafeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'readSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writeSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'condition', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'char', internalType: 'string', type: 'string' }],
    name: 'breakpoint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'char', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'breakpoint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'string', type: 'string' },
      { name: 'to', internalType: 'string', type: 'string' },
    ],
    name: 'copyFile',
    outputs: [{ name: 'copied', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'recursive', internalType: 'bool', type: 'bool' },
    ],
    name: 'createDir',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'walletLabel', internalType: 'string', type: 'string' }],
    name: 'createWallet',
    outputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'createWallet',
    outputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'walletLabel', internalType: 'string', type: 'string' },
    ],
    name: 'createWallet',
    outputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'derivationPath', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool', type: 'bool' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address', type: 'address' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256', type: 'int256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string', type: 'string' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'exists',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandInput', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'ffi',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'fsMetadata',
    outputs: [
      {
        name: 'metadata',
        internalType: 'struct VmSafe.FsMetadata',
        type: 'tuple',
        components: [
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
          { name: 'length', internalType: 'uint256', type: 'uint256' },
          { name: 'readOnly', internalType: 'bool', type: 'bool' },
          { name: 'modified', internalType: 'uint256', type: 'uint256' },
          { name: 'accessed', internalType: 'uint256', type: 'uint256' },
          { name: 'created', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [
      { name: 'creationBytecode', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [
      { name: 'runtimeBytecode', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getLabel',
    outputs: [{ name: 'currentLabel', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'elementSlot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getMappingKeyAndParentOf',
    outputs: [
      { name: 'found', internalType: 'bool', type: 'bool' },
      { name: 'key', internalType: 'bytes32', type: 'bytes32' },
      { name: 'parent', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'mappingSlot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getMappingLength',
    outputs: [{ name: 'length', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'mappingSlot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'idx', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMappingSlotAt',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: 'logs',
        internalType: 'struct VmSafe.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'emitter', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'isDir',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'isFile',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'keyExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newLabel', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseAddress',
    outputs: [
      { name: 'parsedValue', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBool',
    outputs: [{ name: 'parsedValue', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBytes',
    outputs: [{ name: 'parsedValue', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBytes32',
    outputs: [
      { name: 'parsedValue', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseInt',
    outputs: [{ name: 'parsedValue', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'json', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddressArray',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBoolArray',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32Array',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytesArray',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonIntArray',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonKeys',
    outputs: [{ name: 'keys', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonStringArray',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUintArray',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseUint',
    outputs: [
      { name: 'parsedValue', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pauseGasMetering',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: 'path', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'maxDepth', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'maxDepth', internalType: 'uint64', type: 'uint64' },
      { name: 'followLinks', internalType: 'bool', type: 'bool' },
    ],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: 'data', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: 'line', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'linkPath', internalType: 'string', type: 'string' }],
    name: 'readLink',
    outputs: [{ name: 'targetPath', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'record',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recordLogs',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'recursive', internalType: 'bool', type: 'bool' },
    ],
    name: 'removeDir',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'resumeGasMetering',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'rpcAlias', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrlStructs',
    outputs: [
      {
        name: 'urls',
        internalType: 'struct VmSafe.Rpc[]',
        type: 'tuple[]',
        components: [
          { name: 'key', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [
      { name: 'urls', internalType: 'string[2][]', type: 'string[2][]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'address', type: 'address' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'int256', type: 'int256' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'serializeJson',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'wallet',
        internalType: 'struct VmSafe.Wallet',
        type: 'tuple',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'publicKeyX', internalType: 'uint256', type: 'uint256' },
          { name: 'publicKeyY', internalType: 'uint256', type: 'uint256' },
          { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'digest', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'digest', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'duration', internalType: 'uint256', type: 'uint256' }],
    name: 'sleep',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startMappingRecording',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopMappingRecording',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandInput', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'tryFfi',
    outputs: [
      {
        name: 'result',
        internalType: 'struct VmSafe.FfiResult',
        type: 'tuple',
        components: [
          { name: 'exitCode', internalType: 'int32', type: 'int32' },
          { name: 'stdout', internalType: 'bytes', type: 'bytes' },
          { name: 'stderr', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unixTime',
    outputs: [
      { name: 'milliseconds', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822Proxiable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DSTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dsTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Test
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetInterfaces',
    outputs: [
      {
        name: 'targetedInterfaces_',
        internalType: 'struct StdInvariant.FuzzInterface[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'artifacts', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountABI}__.
 */
export function useAccountRead(config = {}) {
  return useContractRead({ abi: accountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountABI}__.
 */
export function useAccountWrite(config = {}) {
  return useContractWrite({ abi: accountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"executeCall"`.
 */
export function useAccountExecuteCall(config = {}) {
  return useContractWrite({
    abi: accountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"lock"`.
 */
export function useAccountLock(config = {}) {
  return useContractWrite({ abi: accountABI, functionName: 'lock', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"setOverrides"`.
 */
export function useAccountSetOverrides(config = {}) {
  return useContractWrite({
    abi: accountABI,
    functionName: 'setOverrides',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"setPermissions"`.
 */
export function useAccountSetPermissions(config = {}) {
  return useContractWrite({
    abi: accountABI,
    functionName: 'setPermissions',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useAccountUpgradeTo(config = {}) {
  return useContractWrite({
    abi: accountABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useAccountUpgradeToAndCall(config = {}) {
  return useContractWrite({
    abi: accountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useAccountValidateUserOp(config = {}) {
  return useContractWrite({
    abi: accountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountABI}__.
 */
export function usePrepareAccountWrite(config = {}) {
  return usePrepareContractWrite({ abi: accountABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"executeCall"`.
 */
export function usePrepareAccountExecuteCall(config = {}) {
  return usePrepareContractWrite({
    abi: accountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"lock"`.
 */
export function usePrepareAccountLock(config = {}) {
  return usePrepareContractWrite({
    abi: accountABI,
    functionName: 'lock',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"setOverrides"`.
 */
export function usePrepareAccountSetOverrides(config = {}) {
  return usePrepareContractWrite({
    abi: accountABI,
    functionName: 'setOverrides',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"setPermissions"`.
 */
export function usePrepareAccountSetPermissions(config = {}) {
  return usePrepareContractWrite({
    abi: accountABI,
    functionName: 'setPermissions',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareAccountUpgradeTo(config = {}) {
  return usePrepareContractWrite({
    abi: accountABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareAccountUpgradeToAndCall(config = {}) {
  return usePrepareContractWrite({
    abi: accountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareAccountValidateUserOp(config = {}) {
  return usePrepareContractWrite({
    abi: accountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountABI}__.
 */
export function useAccountEvent(config = {}) {
  return useContractEvent({ abi: accountABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useAccountAdminChangedEvent(config = {}) {
  return useContractEvent({
    abi: accountABI,
    eventName: 'AdminChanged',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useAccountBeaconUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: accountABI,
    eventName: 'BeaconUpgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountABI}__ and `eventName` set to `"LockUpdated"`.
 */
export function useAccountLockUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: accountABI,
    eventName: 'LockUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountABI}__ and `eventName` set to `"OverrideUpdated"`.
 */
export function useAccountOverrideUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: accountABI,
    eventName: 'OverrideUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountABI}__ and `eventName` set to `"PermissionUpdated"`.
 */
export function useAccountPermissionUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: accountABI,
    eventName: 'PermissionUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountABI}__ and `eventName` set to `"TransactionExecuted"`.
 */
export function useAccountTransactionExecutedEvent(config = {}) {
  return useContractEvent({
    abi: accountABI,
    eventName: 'TransactionExecuted',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useAccountUpgradedEvent(config = {}) {
  return useContractEvent({ abi: accountABI, eventName: 'Upgraded', ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link artAccountABI}__.
 */
export function useArtAccountRead(config = {}) {
  return useContractRead({ abi: artAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__.
 */
export function useArtAccountWrite(config = {}) {
  return useContractWrite({ abi: artAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"approveTransfer"`.
 */
export function useArtAccountApproveTransfer(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'approveTransfer',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"completeTransfer"`.
 */
export function useArtAccountCompleteTransfer(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'completeTransfer',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"executeCall"`.
 */
export function useArtAccountExecuteCall(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"initialize"`.
 */
export function useArtAccountInitialize(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'initialize',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"lock"`.
 */
export function useArtAccountLock(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'lock',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"setOverrides"`.
 */
export function useArtAccountSetOverrides(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'setOverrides',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"setPermissions"`.
 */
export function useArtAccountSetPermissions(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'setPermissions',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"startTransfer"`.
 */
export function useArtAccountStartTransfer(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'startTransfer',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"update"`.
 */
export function useArtAccountUpdate(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'update',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useArtAccountUpgradeTo(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useArtAccountUpgradeToAndCall(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useArtAccountValidateUserOp(config = {}) {
  return useContractWrite({
    abi: artAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__.
 */
export function usePrepareArtAccountWrite(config = {}) {
  return usePrepareContractWrite({ abi: artAccountABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"approveTransfer"`.
 */
export function usePrepareArtAccountApproveTransfer(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'approveTransfer',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"completeTransfer"`.
 */
export function usePrepareArtAccountCompleteTransfer(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'completeTransfer',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"executeCall"`.
 */
export function usePrepareArtAccountExecuteCall(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareArtAccountInitialize(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'initialize',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"lock"`.
 */
export function usePrepareArtAccountLock(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'lock',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"setOverrides"`.
 */
export function usePrepareArtAccountSetOverrides(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'setOverrides',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"setPermissions"`.
 */
export function usePrepareArtAccountSetPermissions(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'setPermissions',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"startTransfer"`.
 */
export function usePrepareArtAccountStartTransfer(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'startTransfer',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"update"`.
 */
export function usePrepareArtAccountUpdate(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'update',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareArtAccountUpgradeTo(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareArtAccountUpgradeToAndCall(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareArtAccountValidateUserOp(config = {}) {
  return usePrepareContractWrite({
    abi: artAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__.
 */
export function useArtAccountEvent(config = {}) {
  return useContractEvent({ abi: artAccountABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useArtAccountAdminChangedEvent(config = {}) {
  return useContractEvent({
    abi: artAccountABI,
    eventName: 'AdminChanged',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useArtAccountBeaconUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: artAccountABI,
    eventName: 'BeaconUpgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__ and `eventName` set to `"Initialized"`.
 */
export function useArtAccountInitializedEvent(config = {}) {
  return useContractEvent({
    abi: artAccountABI,
    eventName: 'Initialized',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__ and `eventName` set to `"LockUpdated"`.
 */
export function useArtAccountLockUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: artAccountABI,
    eventName: 'LockUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__ and `eventName` set to `"OverrideUpdated"`.
 */
export function useArtAccountOverrideUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: artAccountABI,
    eventName: 'OverrideUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__ and `eventName` set to `"PermissionUpdated"`.
 */
export function useArtAccountPermissionUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: artAccountABI,
    eventName: 'PermissionUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__ and `eventName` set to `"TransactionExecuted"`.
 */
export function useArtAccountTransactionExecutedEvent(config = {}) {
  return useContractEvent({
    abi: artAccountABI,
    eventName: 'TransactionExecuted',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artAccountABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useArtAccountUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: artAccountABI,
    eventName: 'Upgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link artRegistryABI}__.
 */
export function useArtRegistryRead(config = {}) {
  return useContractRead({ abi: artRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__.
 */
export function useArtRegistryWrite(config = {}) {
  return useContractWrite({ abi: artRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"approve"`.
 */
export function useArtRegistryApprove(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"burn"`.
 */
export function useArtRegistryBurn(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'burn',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"burnArt"`.
 */
export function useArtRegistryBurnArt(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'burnArt',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"registerArt"`.
 */
export function useArtRegistryRegisterArt(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'registerArt',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useArtRegistryRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useArtRegistrySafeTransferFrom(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useArtRegistrySetApprovalForAll(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"transferArt"`.
 */
export function useArtRegistryTransferArt(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'transferArt',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useArtRegistryTransferFrom(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useArtRegistryTransferOwnership(config = {}) {
  return useContractWrite({
    abi: artRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__.
 */
export function usePrepareArtRegistryWrite(config = {}) {
  return usePrepareContractWrite({ abi: artRegistryABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareArtRegistryApprove(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareArtRegistryBurn(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'burn',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"burnArt"`.
 */
export function usePrepareArtRegistryBurnArt(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'burnArt',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"registerArt"`.
 */
export function usePrepareArtRegistryRegisterArt(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'registerArt',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareArtRegistryRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareArtRegistrySafeTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareArtRegistrySetApprovalForAll(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"transferArt"`.
 */
export function usePrepareArtRegistryTransferArt(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'transferArt',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareArtRegistryTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareArtRegistryTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: artRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artRegistryABI}__.
 */
export function useArtRegistryEvent(config = {}) {
  return useContractEvent({ abi: artRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artRegistryABI}__ and `eventName` set to `"Approval"`.
 */
export function useArtRegistryApprovalEvent(config = {}) {
  return useContractEvent({
    abi: artRegistryABI,
    eventName: 'Approval',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artRegistryABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useArtRegistryApprovalForAllEvent(config = {}) {
  return useContractEvent({
    abi: artRegistryABI,
    eventName: 'ApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artRegistryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useArtRegistryOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: artRegistryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artRegistryABI}__ and `eventName` set to `"Transfer"`.
 */
export function useArtRegistryTransferEvent(config = {}) {
  return useContractEvent({
    abi: artRegistryABI,
    eventName: 'Transfer',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link artTableABI}__.
 */
export function useArtTableRead(config = {}) {
  return useContractRead({ abi: artTableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artTableABI}__.
 */
export function useArtTableWrite(config = {}) {
  return useContractWrite({ abi: artTableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"insertIntoTable"`.
 */
export function useArtTableInsertIntoTable(config = {}) {
  return useContractWrite({
    abi: artTableABI,
    functionName: 'insertIntoTable',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useArtTableRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: artTableABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"setAccessControl"`.
 */
export function useArtTableSetAccessControl(config = {}) {
  return useContractWrite({
    abi: artTableABI,
    functionName: 'setAccessControl',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useArtTableTransferOwnership(config = {}) {
  return useContractWrite({
    abi: artTableABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"updateTable"`.
 */
export function useArtTableUpdateTable(config = {}) {
  return useContractWrite({
    abi: artTableABI,
    functionName: 'updateTable',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artTableABI}__.
 */
export function usePrepareArtTableWrite(config = {}) {
  return usePrepareContractWrite({ abi: artTableABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"insertIntoTable"`.
 */
export function usePrepareArtTableInsertIntoTable(config = {}) {
  return usePrepareContractWrite({
    abi: artTableABI,
    functionName: 'insertIntoTable',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareArtTableRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: artTableABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"setAccessControl"`.
 */
export function usePrepareArtTableSetAccessControl(config = {}) {
  return usePrepareContractWrite({
    abi: artTableABI,
    functionName: 'setAccessControl',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareArtTableTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: artTableABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link artTableABI}__ and `functionName` set to `"updateTable"`.
 */
export function usePrepareArtTableUpdateTable(config = {}) {
  return usePrepareContractWrite({
    abi: artTableABI,
    functionName: 'updateTable',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artTableABI}__.
 */
export function useArtTableEvent(config = {}) {
  return useContractEvent({ abi: artTableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link artTableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useArtTableOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: artTableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function useBaseAccountRead(config = {}) {
  return useContractRead({ abi: baseAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function useBaseAccountWrite(config = {}) {
  return useContractWrite({ abi: baseAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useBaseAccountValidateUserOp(config = {}) {
  return useContractWrite({
    abi: baseAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function usePrepareBaseAccountWrite(config = {}) {
  return usePrepareContractWrite({ abi: baseAccountABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareBaseAccountValidateUserOp(config = {}) {
  return usePrepareContractWrite({
    abi: baseAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterScriptABI}__.
 */
export function useCounterScriptRead(config = {}) {
  return useContractRead({ abi: counterScriptABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterScriptABI}__.
 */
export function useCounterScriptWrite(config = {}) {
  return useContractWrite({ abi: counterScriptABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterScriptABI}__ and `functionName` set to `"run"`.
 */
export function useCounterScriptRun(config = {}) {
  return useContractWrite({
    abi: counterScriptABI,
    functionName: 'run',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterScriptABI}__ and `functionName` set to `"setUp"`.
 */
export function useCounterScriptSetUp(config = {}) {
  return useContractWrite({
    abi: counterScriptABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterScriptABI}__.
 */
export function usePrepareCounterScriptWrite(config = {}) {
  return usePrepareContractWrite({ abi: counterScriptABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterScriptABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareCounterScriptRun(config = {}) {
  return usePrepareContractWrite({
    abi: counterScriptABI,
    functionName: 'run',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterScriptABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareCounterScriptSetUp(config = {}) {
  return usePrepareContractWrite({
    abi: counterScriptABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead(config = {}) {
  return useContractRead({ abi: counterABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite(config = {}) {
  return useContractWrite({ abi: counterABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement(config = {}) {
  return useContractWrite({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber(config = {}) {
  return useContractWrite({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite(config = {}) {
  return usePrepareContractWrite({ abi: counterABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(config = {}) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(config = {}) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent(config = {}) {
  return useContractEvent({ abi: counterABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(config = {}) {
  return useContractEvent({ abi: counterABI, eventName: 'Transfer', ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__.
 */
export function useCounterTestRead(config = {}) {
  return useContractRead({ abi: counterTestABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__.
 */
export function useCounterTestWrite(config = {}) {
  return useContractWrite({ abi: counterTestABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"failed"`.
 */
export function useCounterTestFailed(config = {}) {
  return useContractWrite({
    abi: counterTestABI,
    functionName: 'failed',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"setUp"`.
 */
export function useCounterTestSetUp(config = {}) {
  return useContractWrite({
    abi: counterTestABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"testIncrement"`.
 */
export function useCounterTestTestIncrement(config = {}) {
  return useContractWrite({
    abi: counterTestABI,
    functionName: 'testIncrement',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"testSetNumber"`.
 */
export function useCounterTestTestSetNumber(config = {}) {
  return useContractWrite({
    abi: counterTestABI,
    functionName: 'testSetNumber',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__.
 */
export function usePrepareCounterTestWrite(config = {}) {
  return usePrepareContractWrite({ abi: counterTestABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareCounterTestFailed(config = {}) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    functionName: 'failed',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareCounterTestSetUp(config = {}) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"testIncrement"`.
 */
export function usePrepareCounterTestTestIncrement(config = {}) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    functionName: 'testIncrement',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"testSetNumber"`.
 */
export function usePrepareCounterTestTestSetNumber(config = {}) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    functionName: 'testSetNumber',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__.
 */
export function useCounterTestEvent(config = {}) {
  return useContractEvent({ abi: counterTestABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log"`.
 */
export function useCounterTestLogEvent(config = {}) {
  return useContractEvent({ abi: counterTestABI, eventName: 'log', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useCounterTestLogAddressEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_address',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useCounterTestLogArrayEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_array',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useCounterTestLogBytesEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_bytes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useCounterTestLogBytes32Event(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_bytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useCounterTestLogIntEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useCounterTestLogNamedAddressEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_address',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useCounterTestLogNamedArrayEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_array',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useCounterTestLogNamedBytesEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_bytes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useCounterTestLogNamedBytes32Event(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_bytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useCounterTestLogNamedDecimalIntEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useCounterTestLogNamedDecimalUintEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useCounterTestLogNamedIntEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useCounterTestLogNamedStringEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_string',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useCounterTestLogNamedUintEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useCounterTestLogStringEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_string',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useCounterTestLogUintEvent(config = {}) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"logs"`.
 */
export function useCounterTestLogsEvent(config = {}) {
  return useContractEvent({ abi: counterTestABI, eventName: 'logs', ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read(config = {}) {
  return useContractRead({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967UpgradeEvent(config = {}) {
  return useContractEvent({ abi: erc1967UpgradeABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeAdminChangedEvent(config = {}) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'AdminChanged',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeBeaconUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'BeaconUpgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'Upgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read(config = {}) {
  return useContractRead({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write(config = {}) {
  return useContractWrite({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve(config = {}) {
  return useContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom(config = {}) {
  return useContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll(config = {}) {
  return useContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom(config = {}) {
  return useContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write(config = {}) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(config = {}) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(config = {}) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event(config = {}) {
  return useContractEvent({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(config = {}) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Approval', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(config = {}) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(config = {}) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Transfer', ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableRead(config = {}) {
  return useContractRead({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableWrite(config = {}) {
  return useContractWrite({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721BurnableApprove(config = {}) {
  return useContractWrite({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721BurnableBurn(config = {}) {
  return useContractWrite({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721BurnableSafeTransferFrom(config = {}) {
  return useContractWrite({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721BurnableSetApprovalForAll(config = {}) {
  return useContractWrite({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721BurnableTransferFrom(config = {}) {
  return useContractWrite({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function usePrepareErc721BurnableWrite(config = {}) {
  return usePrepareContractWrite({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721BurnableApprove(config = {}) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721BurnableBurn(config = {}) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721BurnableSafeTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721BurnableSetApprovalForAll(config = {}) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721BurnableTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableEvent(config = {}) {
  return useContractEvent({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721BurnableApprovalEvent(config = {}) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Approval',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721BurnableApprovalForAllEvent(config = {}) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'ApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721BurnableTransferEvent(config = {}) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Transfer',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodTransferResolverABI}__.
 */
export function useGoodTransferResolverRead(config = {}) {
  return useContractRead({ abi: goodTransferResolverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__.
 */
export function useGoodTransferResolverWrite(config = {}) {
  return useContractWrite({ abi: goodTransferResolverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"attest"`.
 */
export function useGoodTransferResolverAttest(config = {}) {
  return useContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'attest',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function useGoodTransferResolverMultiAttest(config = {}) {
  return useContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'multiAttest',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function useGoodTransferResolverMultiRevoke(config = {}) {
  return useContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'multiRevoke',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useGoodTransferResolverRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function useGoodTransferResolverRevoke(config = {}) {
  return useContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'revoke',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useGoodTransferResolverTransferOwnership(config = {}) {
  return useContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__.
 */
export function usePrepareGoodTransferResolverWrite(config = {}) {
  return usePrepareContractWrite({ abi: goodTransferResolverABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"attest"`.
 */
export function usePrepareGoodTransferResolverAttest(config = {}) {
  return usePrepareContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'attest',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function usePrepareGoodTransferResolverMultiAttest(config = {}) {
  return usePrepareContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'multiAttest',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function usePrepareGoodTransferResolverMultiRevoke(config = {}) {
  return usePrepareContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'multiRevoke',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareGoodTransferResolverRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareGoodTransferResolverRevoke(config = {}) {
  return usePrepareContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'revoke',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodTransferResolverABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareGoodTransferResolverTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: goodTransferResolverABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goodTransferResolverABI}__.
 */
export function useGoodTransferResolverEvent(config = {}) {
  return useContractEvent({ abi: goodTransferResolverABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goodTransferResolverABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useGoodTransferResolverOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: goodTransferResolverABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link houseAccountABI}__.
 */
export function useHouseAccountRead(config = {}) {
  return useContractRead({ abi: houseAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__.
 */
export function useHouseAccountWrite(config = {}) {
  return useContractWrite({ abi: houseAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"executeCall"`.
 */
export function useHouseAccountExecuteCall(config = {}) {
  return useContractWrite({
    abi: houseAccountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"lock"`.
 */
export function useHouseAccountLock(config = {}) {
  return useContractWrite({
    abi: houseAccountABI,
    functionName: 'lock',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"setOverrides"`.
 */
export function useHouseAccountSetOverrides(config = {}) {
  return useContractWrite({
    abi: houseAccountABI,
    functionName: 'setOverrides',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"setPermissions"`.
 */
export function useHouseAccountSetPermissions(config = {}) {
  return useContractWrite({
    abi: houseAccountABI,
    functionName: 'setPermissions',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"update"`.
 */
export function useHouseAccountUpdate(config = {}) {
  return useContractWrite({
    abi: houseAccountABI,
    functionName: 'update',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useHouseAccountUpgradeTo(config = {}) {
  return useContractWrite({
    abi: houseAccountABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useHouseAccountUpgradeToAndCall(config = {}) {
  return useContractWrite({
    abi: houseAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useHouseAccountValidateUserOp(config = {}) {
  return useContractWrite({
    abi: houseAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__.
 */
export function usePrepareHouseAccountWrite(config = {}) {
  return usePrepareContractWrite({ abi: houseAccountABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"executeCall"`.
 */
export function usePrepareHouseAccountExecuteCall(config = {}) {
  return usePrepareContractWrite({
    abi: houseAccountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"lock"`.
 */
export function usePrepareHouseAccountLock(config = {}) {
  return usePrepareContractWrite({
    abi: houseAccountABI,
    functionName: 'lock',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"setOverrides"`.
 */
export function usePrepareHouseAccountSetOverrides(config = {}) {
  return usePrepareContractWrite({
    abi: houseAccountABI,
    functionName: 'setOverrides',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"setPermissions"`.
 */
export function usePrepareHouseAccountSetPermissions(config = {}) {
  return usePrepareContractWrite({
    abi: houseAccountABI,
    functionName: 'setPermissions',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"update"`.
 */
export function usePrepareHouseAccountUpdate(config = {}) {
  return usePrepareContractWrite({
    abi: houseAccountABI,
    functionName: 'update',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareHouseAccountUpgradeTo(config = {}) {
  return usePrepareContractWrite({
    abi: houseAccountABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareHouseAccountUpgradeToAndCall(config = {}) {
  return usePrepareContractWrite({
    abi: houseAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareHouseAccountValidateUserOp(config = {}) {
  return usePrepareContractWrite({
    abi: houseAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseAccountABI}__.
 */
export function useHouseAccountEvent(config = {}) {
  return useContractEvent({ abi: houseAccountABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseAccountABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useHouseAccountAdminChangedEvent(config = {}) {
  return useContractEvent({
    abi: houseAccountABI,
    eventName: 'AdminChanged',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseAccountABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useHouseAccountBeaconUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: houseAccountABI,
    eventName: 'BeaconUpgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseAccountABI}__ and `eventName` set to `"LockUpdated"`.
 */
export function useHouseAccountLockUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: houseAccountABI,
    eventName: 'LockUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseAccountABI}__ and `eventName` set to `"OverrideUpdated"`.
 */
export function useHouseAccountOverrideUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: houseAccountABI,
    eventName: 'OverrideUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseAccountABI}__ and `eventName` set to `"PermissionUpdated"`.
 */
export function useHouseAccountPermissionUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: houseAccountABI,
    eventName: 'PermissionUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseAccountABI}__ and `eventName` set to `"TransactionExecuted"`.
 */
export function useHouseAccountTransactionExecutedEvent(config = {}) {
  return useContractEvent({
    abi: houseAccountABI,
    eventName: 'TransactionExecuted',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseAccountABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useHouseAccountUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: houseAccountABI,
    eventName: 'Upgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link houseRegistryABI}__.
 */
export function useHouseRegistryRead(config = {}) {
  return useContractRead({ abi: houseRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__.
 */
export function useHouseRegistryWrite(config = {}) {
  return useContractWrite({ abi: houseRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"approve"`.
 */
export function useHouseRegistryApprove(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"burn"`.
 */
export function useHouseRegistryBurn(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'burn',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"createHouse"`.
 */
export function useHouseRegistryCreateHouse(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'createHouse',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"destroyHouse"`.
 */
export function useHouseRegistryDestroyHouse(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'destroyHouse',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useHouseRegistryRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useHouseRegistrySafeTransferFrom(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useHouseRegistrySetApprovalForAll(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useHouseRegistryTransferFrom(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useHouseRegistryTransferOwnership(config = {}) {
  return useContractWrite({
    abi: houseRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__.
 */
export function usePrepareHouseRegistryWrite(config = {}) {
  return usePrepareContractWrite({ abi: houseRegistryABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareHouseRegistryApprove(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareHouseRegistryBurn(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'burn',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"createHouse"`.
 */
export function usePrepareHouseRegistryCreateHouse(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'createHouse',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"destroyHouse"`.
 */
export function usePrepareHouseRegistryDestroyHouse(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'destroyHouse',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareHouseRegistryRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareHouseRegistrySafeTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareHouseRegistrySetApprovalForAll(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareHouseRegistryTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareHouseRegistryTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: houseRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseRegistryABI}__.
 */
export function useHouseRegistryEvent(config = {}) {
  return useContractEvent({ abi: houseRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseRegistryABI}__ and `eventName` set to `"Approval"`.
 */
export function useHouseRegistryApprovalEvent(config = {}) {
  return useContractEvent({
    abi: houseRegistryABI,
    eventName: 'Approval',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseRegistryABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useHouseRegistryApprovalForAllEvent(config = {}) {
  return useContractEvent({
    abi: houseRegistryABI,
    eventName: 'ApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseRegistryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useHouseRegistryOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: houseRegistryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseRegistryABI}__ and `eventName` set to `"Transfer"`.
 */
export function useHouseRegistryTransferEvent(config = {}) {
  return useContractEvent({
    abi: houseRegistryABI,
    eventName: 'Transfer',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link houseTableABI}__.
 */
export function useHouseTableRead(config = {}) {
  return useContractRead({ abi: houseTableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseTableABI}__.
 */
export function useHouseTableWrite(config = {}) {
  return useContractWrite({ abi: houseTableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseTableABI}__ and `functionName` set to `"insertIntoTable"`.
 */
export function useHouseTableInsertIntoTable(config = {}) {
  return useContractWrite({
    abi: houseTableABI,
    functionName: 'insertIntoTable',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseTableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useHouseTableRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: houseTableABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseTableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useHouseTableTransferOwnership(config = {}) {
  return useContractWrite({
    abi: houseTableABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link houseTableABI}__ and `functionName` set to `"updateTable"`.
 */
export function useHouseTableUpdateTable(config = {}) {
  return useContractWrite({
    abi: houseTableABI,
    functionName: 'updateTable',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseTableABI}__.
 */
export function usePrepareHouseTableWrite(config = {}) {
  return usePrepareContractWrite({ abi: houseTableABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseTableABI}__ and `functionName` set to `"insertIntoTable"`.
 */
export function usePrepareHouseTableInsertIntoTable(config = {}) {
  return usePrepareContractWrite({
    abi: houseTableABI,
    functionName: 'insertIntoTable',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseTableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareHouseTableRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: houseTableABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseTableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareHouseTableTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: houseTableABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link houseTableABI}__ and `functionName` set to `"updateTable"`.
 */
export function usePrepareHouseTableUpdateTable(config = {}) {
  return usePrepareContractWrite({
    abi: houseTableABI,
    functionName: 'updateTable',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseTableABI}__.
 */
export function useHouseTableEvent(config = {}) {
  return useContractEvent({ abi: houseTableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link houseTableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useHouseTableOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: houseTableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccountABI}__.
 */
export function useIAccountWrite(config = {}) {
  return useContractWrite({ abi: iAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useIAccountValidateUserOp(config = {}) {
  return useContractWrite({
    abi: iAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccountABI}__.
 */
export function usePrepareIAccountWrite(config = {}) {
  return usePrepareContractWrite({ abi: iAccountABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareIAccountValidateUserOp(config = {}) {
  return usePrepareContractWrite({
    abi: iAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccountGuardianABI}__.
 */
export function useIAccountGuardianRead(config = {}) {
  return useContractRead({ abi: iAccountGuardianABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccountGuardianABI}__.
 */
export function useIAccountGuardianWrite(config = {}) {
  return useContractWrite({ abi: iAccountGuardianABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccountGuardianABI}__ and `functionName` set to `"setTrustedExecutor"`.
 */
export function useIAccountGuardianSetTrustedExecutor(config = {}) {
  return useContractWrite({
    abi: iAccountGuardianABI,
    functionName: 'setTrustedExecutor',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccountGuardianABI}__ and `functionName` set to `"setTrustedImplementation"`.
 */
export function useIAccountGuardianSetTrustedImplementation(config = {}) {
  return useContractWrite({
    abi: iAccountGuardianABI,
    functionName: 'setTrustedImplementation',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccountGuardianABI}__.
 */
export function usePrepareIAccountGuardianWrite(config = {}) {
  return usePrepareContractWrite({ abi: iAccountGuardianABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccountGuardianABI}__ and `functionName` set to `"setTrustedExecutor"`.
 */
export function usePrepareIAccountGuardianSetTrustedExecutor(config = {}) {
  return usePrepareContractWrite({
    abi: iAccountGuardianABI,
    functionName: 'setTrustedExecutor',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccountGuardianABI}__ and `functionName` set to `"setTrustedImplementation"`.
 */
export function usePrepareIAccountGuardianSetTrustedImplementation(
  config = {},
) {
  return usePrepareContractWrite({
    abi: iAccountGuardianABI,
    functionName: 'setTrustedImplementation',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAggregatorABI}__.
 */
export function useIAggregatorRead(config = {}) {
  return useContractRead({ abi: iAggregatorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeaconRead(config = {}) {
  return useContractRead({ abi: iBeaconABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__.
 */
export function useIerc1271Read(config = {}) {
  return useContractRead({ abi: ierc1271ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read(config = {}) {
  return useContractRead({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverRead(config = {}) {
  return useContractRead({ abi: ierc1155ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverWrite(config = {}) {
  return useContractWrite({ abi: ierc1155ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverOnErc1155BatchReceived(config = {}) {
  return useContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverOnErc1155Received(config = {}) {
  return useContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function usePrepareIerc1155ReceiverWrite(config = {}) {
  return usePrepareContractWrite({ abi: ierc1155ReceiverABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155BatchReceived(config = {}) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155Received(config = {}) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__.
 */
export function useIerc1967Event(config = {}) {
  return useContractEvent({ abi: ierc1967ABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967AdminChangedEvent(config = {}) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'AdminChanged',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967BeaconUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'BeaconUpgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradedEvent(config = {}) {
  return useContractEvent({
    abi: ierc1967ABI,
    eventName: 'Upgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551RegistryABI}__.
 */
export function useIerc6551RegistryRead(config = {}) {
  return useContractRead({ abi: ierc6551RegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc6551RegistryABI}__.
 */
export function useIerc6551RegistryWrite(config = {}) {
  return useContractWrite({ abi: ierc6551RegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc6551RegistryABI}__ and `functionName` set to `"createAccount"`.
 */
export function useIerc6551RegistryCreateAccount(config = {}) {
  return useContractWrite({
    abi: ierc6551RegistryABI,
    functionName: 'createAccount',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc6551RegistryABI}__.
 */
export function usePrepareIerc6551RegistryWrite(config = {}) {
  return usePrepareContractWrite({ abi: ierc6551RegistryABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc6551RegistryABI}__ and `functionName` set to `"createAccount"`.
 */
export function usePrepareIerc6551RegistryCreateAccount(config = {}) {
  return usePrepareContractWrite({
    abi: ierc6551RegistryABI,
    functionName: 'createAccount',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc6551RegistryABI}__.
 */
export function useIerc6551RegistryEvent(config = {}) {
  return useContractEvent({ abi: ierc6551RegistryABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc6551RegistryABI}__ and `eventName` set to `"AccountCreated"`.
 */
export function useIerc6551RegistryAccountCreatedEvent(config = {}) {
  return useContractEvent({
    abi: ierc6551RegistryABI,
    eventName: 'AccountCreated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551AccountABI}__.
 */
export function useIerc6551AccountRead(config = {}) {
  return useContractRead({ abi: ierc6551AccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc6551AccountABI}__.
 */
export function useIerc6551AccountWrite(config = {}) {
  return useContractWrite({ abi: ierc6551AccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc6551AccountABI}__ and `functionName` set to `"executeCall"`.
 */
export function useIerc6551AccountExecuteCall(config = {}) {
  return useContractWrite({
    abi: ierc6551AccountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc6551AccountABI}__.
 */
export function usePrepareIerc6551AccountWrite(config = {}) {
  return usePrepareContractWrite({ abi: ierc6551AccountABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc6551AccountABI}__ and `functionName` set to `"executeCall"`.
 */
export function usePrepareIerc6551AccountExecuteCall(config = {}) {
  return usePrepareContractWrite({
    abi: ierc6551AccountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc6551AccountABI}__.
 */
export function useIerc6551AccountEvent(config = {}) {
  return useContractEvent({ abi: ierc6551AccountABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc6551AccountABI}__ and `eventName` set to `"TransactionExecuted"`.
 */
export function useIerc6551AccountTransactionExecutedEvent(config = {}) {
  return useContractEvent({
    abi: ierc6551AccountABI,
    eventName: 'TransactionExecuted',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551AccountProxyABI}__.
 */
export function useIerc6551AccountProxyRead(config = {}) {
  return useContractRead({ abi: ierc6551AccountProxyABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead(config = {}) {
  return useContractRead({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite(config = {}) {
  return useContractWrite({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove(config = {}) {
  return useContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom(config = {}) {
  return useContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll(config = {}) {
  return useContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom(config = {}) {
  return useContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite(config = {}) {
  return usePrepareContractWrite({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent(config = {}) {
  return useContractEvent({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(config = {}) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(config = {}) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(config = {}) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read(config = {}) {
  return useContractRead({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write(config = {}) {
  return useContractWrite({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve(config = {}) {
  return useContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom(config = {}) {
  return useContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll(config = {}) {
  return useContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom(config = {}) {
  return useContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write(config = {}) {
  return usePrepareContractWrite({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event(config = {}) {
  return useContractEvent({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(config = {}) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'Approval', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(config = {}) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(config = {}) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'Transfer', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite(config = {}) {
  return useContractWrite({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received(config = {}) {
  return useContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite(config = {}) {
  return usePrepareContractWrite({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(config = {}) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointRead(config = {}) {
  return useContractRead({ abi: iEntryPointABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointWrite(config = {}) {
  return useContractWrite({ abi: iEntryPointABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"addStake"`.
 */
export function useIEntryPointAddStake(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'addStake',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"depositTo"`.
 */
export function useIEntryPointDepositTo(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'depositTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getSenderAddress"`.
 */
export function useIEntryPointGetSenderAddress(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'getSenderAddress',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleAggregatedOps"`.
 */
export function useIEntryPointHandleAggregatedOps(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'handleAggregatedOps',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleOps"`.
 */
export function useIEntryPointHandleOps(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'handleOps',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function useIEntryPointIncrementNonce(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'incrementNonce',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateHandleOp"`.
 */
export function useIEntryPointSimulateHandleOp(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'simulateHandleOp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateValidation"`.
 */
export function useIEntryPointSimulateValidation(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'simulateValidation',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useIEntryPointUnlockStake(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'unlockStake',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useIEntryPointWithdrawStake(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'withdrawStake',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useIEntryPointWithdrawTo(config = {}) {
  return useContractWrite({
    abi: iEntryPointABI,
    functionName: 'withdrawTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function usePrepareIEntryPointWrite(config = {}) {
  return usePrepareContractWrite({ abi: iEntryPointABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareIEntryPointAddStake(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'addStake',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePrepareIEntryPointDepositTo(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'depositTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getSenderAddress"`.
 */
export function usePrepareIEntryPointGetSenderAddress(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'getSenderAddress',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleAggregatedOps"`.
 */
export function usePrepareIEntryPointHandleAggregatedOps(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'handleAggregatedOps',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleOps"`.
 */
export function usePrepareIEntryPointHandleOps(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'handleOps',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function usePrepareIEntryPointIncrementNonce(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'incrementNonce',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateHandleOp"`.
 */
export function usePrepareIEntryPointSimulateHandleOp(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'simulateHandleOp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateValidation"`.
 */
export function usePrepareIEntryPointSimulateValidation(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'simulateValidation',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareIEntryPointUnlockStake(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'unlockStake',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareIEntryPointWithdrawStake(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'withdrawStake',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareIEntryPointWithdrawTo(config = {}) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'withdrawTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointEvent(config = {}) {
  return useContractEvent({ abi: iEntryPointABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"AccountDeployed"`.
 */
export function useIEntryPointAccountDeployedEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'AccountDeployed',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"BeforeExecution"`.
 */
export function useIEntryPointBeforeExecutionEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'BeforeExecution',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIEntryPointDepositedEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'Deposited',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"SignatureAggregatorChanged"`.
 */
export function useIEntryPointSignatureAggregatorChangedEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'SignatureAggregatorChanged',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeLocked"`.
 */
export function useIEntryPointStakeLockedEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeLocked',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeUnlocked"`.
 */
export function useIEntryPointStakeUnlockedEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeUnlocked',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeWithdrawn"`.
 */
export function useIEntryPointStakeWithdrawnEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeWithdrawn',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"UserOperationEvent"`.
 */
export function useIEntryPointUserOperationEventEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'UserOperationEvent',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"UserOperationRevertReason"`.
 */
export function useIEntryPointUserOperationRevertReasonEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'UserOperationRevertReason',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useIEntryPointWithdrawnEvent(config = {}) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'Withdrawn',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read(config = {}) {
  return useContractRead({ abi: iMulticall3ABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write(config = {}) {
  return useContractWrite({ abi: iMulticall3ABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate(config = {}) {
  return useContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3(config = {}) {
  return useContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value(config = {}) {
  return useContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate(config = {}) {
  return useContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate(config = {}) {
  return useContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate(config = {}) {
  return useContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write(config = {}) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(config = {}) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(config = {}) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(config = {}) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(config = {}) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(config = {}) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(config = {}) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iNonceManagerABI}__.
 */
export function useINonceManagerRead(config = {}) {
  return useContractRead({ abi: iNonceManagerABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iNonceManagerABI}__.
 */
export function useINonceManagerWrite(config = {}) {
  return useContractWrite({ abi: iNonceManagerABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iNonceManagerABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function useINonceManagerIncrementNonce(config = {}) {
  return useContractWrite({
    abi: iNonceManagerABI,
    functionName: 'incrementNonce',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iNonceManagerABI}__.
 */
export function usePrepareINonceManagerWrite(config = {}) {
  return usePrepareContractWrite({ abi: iNonceManagerABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iNonceManagerABI}__ and `functionName` set to `"incrementNonce"`.
 */
export function usePrepareINonceManagerIncrementNonce(config = {}) {
  return usePrepareContractWrite({
    abi: iNonceManagerABI,
    functionName: 'incrementNonce',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSchemaRegistryABI}__.
 */
export function useISchemaRegistryRead(config = {}) {
  return useContractRead({ abi: iSchemaRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaRegistryABI}__.
 */
export function useISchemaRegistryWrite(config = {}) {
  return useContractWrite({ abi: iSchemaRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaRegistryABI}__ and `functionName` set to `"register"`.
 */
export function useISchemaRegistryRegister(config = {}) {
  return useContractWrite({
    abi: iSchemaRegistryABI,
    functionName: 'register',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaRegistryABI}__.
 */
export function usePrepareISchemaRegistryWrite(config = {}) {
  return usePrepareContractWrite({ abi: iSchemaRegistryABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaRegistryABI}__ and `functionName` set to `"register"`.
 */
export function usePrepareISchemaRegistryRegister(config = {}) {
  return usePrepareContractWrite({
    abi: iSchemaRegistryABI,
    functionName: 'register',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSchemaRegistryABI}__.
 */
export function useISchemaRegistryEvent(config = {}) {
  return useContractEvent({ abi: iSchemaRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSchemaRegistryABI}__ and `eventName` set to `"Registered"`.
 */
export function useISchemaRegistryRegisteredEvent(config = {}) {
  return useContractEvent({
    abi: iSchemaRegistryABI,
    eventName: 'Registered',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerRead(config = {}) {
  return useContractRead({ abi: iStakeManagerABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerWrite(config = {}) {
  return useContractWrite({ abi: iStakeManagerABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"addStake"`.
 */
export function useIStakeManagerAddStake(config = {}) {
  return useContractWrite({
    abi: iStakeManagerABI,
    functionName: 'addStake',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"depositTo"`.
 */
export function useIStakeManagerDepositTo(config = {}) {
  return useContractWrite({
    abi: iStakeManagerABI,
    functionName: 'depositTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useIStakeManagerUnlockStake(config = {}) {
  return useContractWrite({
    abi: iStakeManagerABI,
    functionName: 'unlockStake',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useIStakeManagerWithdrawStake(config = {}) {
  return useContractWrite({
    abi: iStakeManagerABI,
    functionName: 'withdrawStake',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useIStakeManagerWithdrawTo(config = {}) {
  return useContractWrite({
    abi: iStakeManagerABI,
    functionName: 'withdrawTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function usePrepareIStakeManagerWrite(config = {}) {
  return usePrepareContractWrite({ abi: iStakeManagerABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareIStakeManagerAddStake(config = {}) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'addStake',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePrepareIStakeManagerDepositTo(config = {}) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'depositTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareIStakeManagerUnlockStake(config = {}) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'unlockStake',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareIStakeManagerWithdrawStake(config = {}) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'withdrawStake',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareIStakeManagerWithdrawTo(config = {}) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'withdrawTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerEvent(config = {}) {
  return useContractEvent({ abi: iStakeManagerABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIStakeManagerDepositedEvent(config = {}) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'Deposited',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeLocked"`.
 */
export function useIStakeManagerStakeLockedEvent(config = {}) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeLocked',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeUnlocked"`.
 */
export function useIStakeManagerStakeUnlockedEvent(config = {}) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeUnlocked',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeWithdrawn"`.
 */
export function useIStakeManagerStakeWithdrawnEvent(config = {}) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeWithdrawn',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useIStakeManagerWithdrawnEvent(config = {}) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'Withdrawn',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent(config = {}) {
  return useContractEvent({ abi: initializableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(config = {}) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberAccountABI}__.
 */
export function useMemberAccountRead(config = {}) {
  return useContractRead({ abi: memberAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__.
 */
export function useMemberAccountWrite(config = {}) {
  return useContractWrite({ abi: memberAccountABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"createHouse"`.
 */
export function useMemberAccountCreateHouse(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'createHouse',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"executeCall"`.
 */
export function useMemberAccountExecuteCall(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"lock"`.
 */
export function useMemberAccountLock(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'lock',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"makeProposal"`.
 */
export function useMemberAccountMakeProposal(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'makeProposal',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"proposalVote"`.
 */
export function useMemberAccountProposalVote(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'proposalVote',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"resgisterArt"`.
 */
export function useMemberAccountResgisterArt(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'resgisterArt',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"setOverrides"`.
 */
export function useMemberAccountSetOverrides(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'setOverrides',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"setPermissions"`.
 */
export function useMemberAccountSetPermissions(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'setPermissions',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"update"`.
 */
export function useMemberAccountUpdate(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'update',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMemberAccountUpgradeTo(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMemberAccountUpgradeToAndCall(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useMemberAccountValidateUserOp(config = {}) {
  return useContractWrite({
    abi: memberAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__.
 */
export function usePrepareMemberAccountWrite(config = {}) {
  return usePrepareContractWrite({ abi: memberAccountABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"createHouse"`.
 */
export function usePrepareMemberAccountCreateHouse(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'createHouse',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"executeCall"`.
 */
export function usePrepareMemberAccountExecuteCall(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'executeCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"lock"`.
 */
export function usePrepareMemberAccountLock(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'lock',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"makeProposal"`.
 */
export function usePrepareMemberAccountMakeProposal(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'makeProposal',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"proposalVote"`.
 */
export function usePrepareMemberAccountProposalVote(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'proposalVote',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"resgisterArt"`.
 */
export function usePrepareMemberAccountResgisterArt(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'resgisterArt',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"setOverrides"`.
 */
export function usePrepareMemberAccountSetOverrides(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'setOverrides',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"setPermissions"`.
 */
export function usePrepareMemberAccountSetPermissions(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'setPermissions',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"update"`.
 */
export function usePrepareMemberAccountUpdate(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'update',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMemberAccountUpgradeTo(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMemberAccountUpgradeToAndCall(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareMemberAccountValidateUserOp(config = {}) {
  return usePrepareContractWrite({
    abi: memberAccountABI,
    functionName: 'validateUserOp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberAccountABI}__.
 */
export function useMemberAccountEvent(config = {}) {
  return useContractEvent({ abi: memberAccountABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberAccountABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMemberAccountAdminChangedEvent(config = {}) {
  return useContractEvent({
    abi: memberAccountABI,
    eventName: 'AdminChanged',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberAccountABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMemberAccountBeaconUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: memberAccountABI,
    eventName: 'BeaconUpgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberAccountABI}__ and `eventName` set to `"LockUpdated"`.
 */
export function useMemberAccountLockUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: memberAccountABI,
    eventName: 'LockUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberAccountABI}__ and `eventName` set to `"OverrideUpdated"`.
 */
export function useMemberAccountOverrideUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: memberAccountABI,
    eventName: 'OverrideUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberAccountABI}__ and `eventName` set to `"PermissionUpdated"`.
 */
export function useMemberAccountPermissionUpdatedEvent(config = {}) {
  return useContractEvent({
    abi: memberAccountABI,
    eventName: 'PermissionUpdated',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberAccountABI}__ and `eventName` set to `"TransactionExecuted"`.
 */
export function useMemberAccountTransactionExecutedEvent(config = {}) {
  return useContractEvent({
    abi: memberAccountABI,
    eventName: 'TransactionExecuted',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberAccountABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMemberAccountUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: memberAccountABI,
    eventName: 'Upgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberRegistryABI}__.
 */
export function useMemberRegistryRead(config = {}) {
  return useContractRead({ abi: memberRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__.
 */
export function useMemberRegistryWrite(config = {}) {
  return useContractWrite({ abi: memberRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"approve"`.
 */
export function useMemberRegistryApprove(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"burn"`.
 */
export function useMemberRegistryBurn(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'burn',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"createMember"`.
 */
export function useMemberRegistryCreateMember(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'createMember',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"destroyMember"`.
 */
export function useMemberRegistryDestroyMember(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'destroyMember',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMemberRegistryRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useMemberRegistrySafeTransferFrom(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMemberRegistrySetApprovalForAll(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMemberRegistryTransferFrom(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMemberRegistryTransferOwnership(config = {}) {
  return useContractWrite({
    abi: memberRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__.
 */
export function usePrepareMemberRegistryWrite(config = {}) {
  return usePrepareContractWrite({ abi: memberRegistryABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMemberRegistryApprove(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'approve',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMemberRegistryBurn(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'burn',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"createMember"`.
 */
export function usePrepareMemberRegistryCreateMember(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'createMember',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"destroyMember"`.
 */
export function usePrepareMemberRegistryDestroyMember(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'destroyMember',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMemberRegistryRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareMemberRegistrySafeTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMemberRegistrySetApprovalForAll(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMemberRegistryTransferFrom(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'transferFrom',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMemberRegistryTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: memberRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberRegistryABI}__.
 */
export function useMemberRegistryEvent(config = {}) {
  return useContractEvent({ abi: memberRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberRegistryABI}__ and `eventName` set to `"Approval"`.
 */
export function useMemberRegistryApprovalEvent(config = {}) {
  return useContractEvent({
    abi: memberRegistryABI,
    eventName: 'Approval',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberRegistryABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMemberRegistryApprovalForAllEvent(config = {}) {
  return useContractEvent({
    abi: memberRegistryABI,
    eventName: 'ApprovalForAll',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberRegistryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMemberRegistryOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: memberRegistryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberRegistryABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMemberRegistryTransferEvent(config = {}) {
  return useContractEvent({
    abi: memberRegistryABI,
    eventName: 'Transfer',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link memberTableABI}__.
 */
export function useMemberTableRead(config = {}) {
  return useContractRead({ abi: memberTableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberTableABI}__.
 */
export function useMemberTableWrite(config = {}) {
  return useContractWrite({ abi: memberTableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberTableABI}__ and `functionName` set to `"insertIntoTable"`.
 */
export function useMemberTableInsertIntoTable(config = {}) {
  return useContractWrite({
    abi: memberTableABI,
    functionName: 'insertIntoTable',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberTableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMemberTableRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: memberTableABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberTableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMemberTableTransferOwnership(config = {}) {
  return useContractWrite({
    abi: memberTableABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link memberTableABI}__ and `functionName` set to `"updateTable"`.
 */
export function useMemberTableUpdateTable(config = {}) {
  return useContractWrite({
    abi: memberTableABI,
    functionName: 'updateTable',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberTableABI}__.
 */
export function usePrepareMemberTableWrite(config = {}) {
  return usePrepareContractWrite({ abi: memberTableABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberTableABI}__ and `functionName` set to `"insertIntoTable"`.
 */
export function usePrepareMemberTableInsertIntoTable(config = {}) {
  return usePrepareContractWrite({
    abi: memberTableABI,
    functionName: 'insertIntoTable',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberTableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMemberTableRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: memberTableABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberTableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMemberTableTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: memberTableABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link memberTableABI}__ and `functionName` set to `"updateTable"`.
 */
export function usePrepareMemberTableUpdateTable(config = {}) {
  return usePrepareContractWrite({
    abi: memberTableABI,
    functionName: 'updateTable',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberTableABI}__.
 */
export function useMemberTableEvent(config = {}) {
  return useContractEvent({ abi: memberTableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link memberTableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMemberTableOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: memberTableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nfcRegistryABI}__.
 */
export function useNfcRegistryRead(config = {}) {
  return useContractRead({ abi: nfcRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nfcRegistryABI}__.
 */
export function useNfcRegistryWrite(config = {}) {
  return useContractWrite({ abi: nfcRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nfcRegistryABI}__ and `functionName` set to `"registerNFC"`.
 */
export function useNfcRegistryRegisterNfc(config = {}) {
  return useContractWrite({
    abi: nfcRegistryABI,
    functionName: 'registerNFC',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nfcRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useNfcRegistryRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: nfcRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nfcRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useNfcRegistryTransferOwnership(config = {}) {
  return useContractWrite({
    abi: nfcRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nfcRegistryABI}__.
 */
export function usePrepareNfcRegistryWrite(config = {}) {
  return usePrepareContractWrite({ abi: nfcRegistryABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nfcRegistryABI}__ and `functionName` set to `"registerNFC"`.
 */
export function usePrepareNfcRegistryRegisterNfc(config = {}) {
  return usePrepareContractWrite({
    abi: nfcRegistryABI,
    functionName: 'registerNFC',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nfcRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareNfcRegistryRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: nfcRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nfcRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareNfcRegistryTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: nfcRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nfcRegistryABI}__.
 */
export function useNfcRegistryEvent(config = {}) {
  return useContractEvent({ abi: nfcRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nfcRegistryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useNfcRegistryOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: nfcRegistryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead(config = {}) {
  return useContractRead({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite(config = {}) {
  return useContractWrite({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership(config = {}) {
  return useContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership(config = {}) {
  return useContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite(config = {}) {
  return usePrepareContractWrite({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(config = {}) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent(config = {}) {
  return useContractEvent({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(config = {}) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link opScriptABI}__.
 */
export function useOpScriptRead(config = {}) {
  return useContractRead({ abi: opScriptABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link opScriptABI}__.
 */
export function useOpScriptWrite(config = {}) {
  return useContractWrite({ abi: opScriptABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link opScriptABI}__ and `functionName` set to `"run"`.
 */
export function useOpScriptRun(config = {}) {
  return useContractWrite({ abi: opScriptABI, functionName: 'run', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link opScriptABI}__ and `functionName` set to `"setUp"`.
 */
export function useOpScriptSetUp(config = {}) {
  return useContractWrite({
    abi: opScriptABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link opScriptABI}__.
 */
export function usePrepareOpScriptWrite(config = {}) {
  return usePrepareContractWrite({ abi: opScriptABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link opScriptABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareOpScriptRun(config = {}) {
  return usePrepareContractWrite({
    abi: opScriptABI,
    functionName: 'run',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link opScriptABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareOpScriptSetUp(config = {}) {
  return usePrepareContractWrite({
    abi: opScriptABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link polygonMumbaiScriptABI}__.
 */
export function usePolygonMumbaiScriptRead(config = {}) {
  return useContractRead({ abi: polygonMumbaiScriptABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonMumbaiScriptABI}__.
 */
export function usePolygonMumbaiScriptWrite(config = {}) {
  return useContractWrite({ abi: polygonMumbaiScriptABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonMumbaiScriptABI}__ and `functionName` set to `"run"`.
 */
export function usePolygonMumbaiScriptRun(config = {}) {
  return useContractWrite({
    abi: polygonMumbaiScriptABI,
    functionName: 'run',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link polygonMumbaiScriptABI}__ and `functionName` set to `"setUp"`.
 */
export function usePolygonMumbaiScriptSetUp(config = {}) {
  return useContractWrite({
    abi: polygonMumbaiScriptABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonMumbaiScriptABI}__.
 */
export function usePreparePolygonMumbaiScriptWrite(config = {}) {
  return usePrepareContractWrite({ abi: polygonMumbaiScriptABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonMumbaiScriptABI}__ and `functionName` set to `"run"`.
 */
export function usePreparePolygonMumbaiScriptRun(config = {}) {
  return usePrepareContractWrite({
    abi: polygonMumbaiScriptABI,
    functionName: 'run',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link polygonMumbaiScriptABI}__ and `functionName` set to `"setUp"`.
 */
export function usePreparePolygonMumbaiScriptSetUp(config = {}) {
  return usePrepareContractWrite({
    abi: polygonMumbaiScriptABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link schemaResolverABI}__.
 */
export function useSchemaResolverRead(config = {}) {
  return useContractRead({ abi: schemaResolverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__.
 */
export function useSchemaResolverWrite(config = {}) {
  return useContractWrite({ abi: schemaResolverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"attest"`.
 */
export function useSchemaResolverAttest(config = {}) {
  return useContractWrite({
    abi: schemaResolverABI,
    functionName: 'attest',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function useSchemaResolverMultiAttest(config = {}) {
  return useContractWrite({
    abi: schemaResolverABI,
    functionName: 'multiAttest',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function useSchemaResolverMultiRevoke(config = {}) {
  return useContractWrite({
    abi: schemaResolverABI,
    functionName: 'multiRevoke',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function useSchemaResolverRevoke(config = {}) {
  return useContractWrite({
    abi: schemaResolverABI,
    functionName: 'revoke',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__.
 */
export function usePrepareSchemaResolverWrite(config = {}) {
  return usePrepareContractWrite({ abi: schemaResolverABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"attest"`.
 */
export function usePrepareSchemaResolverAttest(config = {}) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    functionName: 'attest',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function usePrepareSchemaResolverMultiAttest(config = {}) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    functionName: 'multiAttest',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function usePrepareSchemaResolverMultiRevoke(config = {}) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    functionName: 'multiRevoke',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareSchemaResolverRevoke(config = {}) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    functionName: 'revoke',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scriptABI}__.
 */
export function useScriptRead(config = {}) {
  return useContractRead({ abi: scriptABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__.
 */
export function useSemverRead(config = {}) {
  return useContractRead({ abi: semverABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scrollSepoliaScriptABI}__.
 */
export function useScrollSepoliaScriptRead(config = {}) {
  return useContractRead({ abi: scrollSepoliaScriptABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link scrollSepoliaScriptABI}__.
 */
export function useScrollSepoliaScriptWrite(config = {}) {
  return useContractWrite({ abi: scrollSepoliaScriptABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link scrollSepoliaScriptABI}__ and `functionName` set to `"run"`.
 */
export function useScrollSepoliaScriptRun(config = {}) {
  return useContractWrite({
    abi: scrollSepoliaScriptABI,
    functionName: 'run',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link scrollSepoliaScriptABI}__ and `functionName` set to `"setUp"`.
 */
export function useScrollSepoliaScriptSetUp(config = {}) {
  return useContractWrite({
    abi: scrollSepoliaScriptABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link scrollSepoliaScriptABI}__.
 */
export function usePrepareScrollSepoliaScriptWrite(config = {}) {
  return usePrepareContractWrite({ abi: scrollSepoliaScriptABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link scrollSepoliaScriptABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareScrollSepoliaScriptRun(config = {}) {
  return usePrepareContractWrite({
    abi: scrollSepoliaScriptABI,
    functionName: 'run',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link scrollSepoliaScriptABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareScrollSepoliaScriptSetUp(config = {}) {
  return usePrepareContractWrite({
    abi: scrollSepoliaScriptABI,
    functionName: 'setUp',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertionsRead(config = {}) {
  return useContractRead({ abi: stdAssertionsABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertionsWrite(config = {}) {
  return useContractWrite({ abi: stdAssertionsABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stdAssertionsABI}__ and `functionName` set to `"failed"`.
 */
export function useStdAssertionsFailed(config = {}) {
  return useContractWrite({
    abi: stdAssertionsABI,
    functionName: 'failed',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function usePrepareStdAssertionsWrite(config = {}) {
  return usePrepareContractWrite({ abi: stdAssertionsABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stdAssertionsABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareStdAssertionsFailed(config = {}) {
  return usePrepareContractWrite({
    abi: stdAssertionsABI,
    functionName: 'failed',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertionsEvent(config = {}) {
  return useContractEvent({ abi: stdAssertionsABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log"`.
 */
export function useStdAssertionsLogEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_address"`.
 */
export function useStdAssertionsLogAddressEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_address',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_array"`.
 */
export function useStdAssertionsLogArrayEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_array',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useStdAssertionsLogBytesEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_bytes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useStdAssertionsLogBytes32Event(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_bytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_int"`.
 */
export function useStdAssertionsLogIntEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useStdAssertionsLogNamedAddressEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_address',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useStdAssertionsLogNamedArrayEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_array',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useStdAssertionsLogNamedBytesEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_bytes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useStdAssertionsLogNamedBytes32Event(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_bytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useStdAssertionsLogNamedDecimalIntEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_decimal_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useStdAssertionsLogNamedDecimalUintEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useStdAssertionsLogNamedIntEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useStdAssertionsLogNamedStringEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_string',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useStdAssertionsLogNamedUintEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_string"`.
 */
export function useStdAssertionsLogStringEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_string',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_uint"`.
 */
export function useStdAssertionsLogUintEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"logs"`.
 */
export function useStdAssertionsLogsEvent(config = {}) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'logs',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead(config = {}) {
  return useContractRead({ abi: stdInvariantABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__.
 */
export function useStdErrorRead(config = {}) {
  return useContractRead({ abi: stdErrorABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__.
 */
export function useStdStorageSafeEvent(config = {}) {
  return useContractEvent({ abi: stdStorageSafeABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__ and `eventName` set to `"SlotFound"`.
 */
export function useStdStorageSafeSlotFoundEvent(config = {}) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    eventName: 'SlotFound',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__ and `eventName` set to `"WARNING_UninitedSlot"`.
 */
export function useStdStorageSafeWarningUninitedSlotEvent(config = {}) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    eventName: 'WARNING_UninitedSlot',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead(config = {}) {
  return useContractRead({ abi: uupsUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite(config = {}) {
  return useContractWrite({ abi: uupsUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo(config = {}) {
  return useContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall(config = {}) {
  return useContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite(config = {}) {
  return usePrepareContractWrite({ abi: uupsUpgradeableABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(config = {}) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(config = {}) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent(config = {}) {
  return useContractEvent({ abi: uupsUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(config = {}) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(config = {}) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmRead(config = {}) {
  return useContractRead({ abi: vmABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmWrite(config = {}) {
  return useContractWrite({ abi: vmABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmAccesses(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'accesses', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function useVmAllowCheatcodes(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"breakpoint"`.
 */
export function useVmBreakpoint(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'breakpoint', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmBroadcast(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'broadcast', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function useVmChainId(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'chainId', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function useVmClearMockedCalls(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmCloseFile(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'closeFile', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function useVmCoinbase(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'coinbase', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"copyFile"`.
 */
export function useVmCopyFile(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'copyFile', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createDir"`.
 */
export function useVmCreateDir(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'createDir', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function useVmCreateFork(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'createFork', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function useVmCreateSelectFork(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createWallet"`.
 */
export function useVmCreateWallet(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'createWallet',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function useVmDeal(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'deal', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function useVmDifficulty(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'difficulty', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envOr"`.
 */
export function useVmEnvOr(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'envOr', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function useVmEtch(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'etch', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"exists"`.
 */
export function useVmExists(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'exists', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function useVmExpectCall(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'expectCall', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCallMinGas"`.
 */
export function useVmExpectCallMinGas(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'expectCallMinGas',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function useVmExpectEmit(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'expectEmit', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function useVmExpectRevert(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectSafeMemory"`.
 */
export function useVmExpectSafeMemory(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'expectSafeMemory',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectSafeMemoryCall"`.
 */
export function useVmExpectSafeMemoryCall(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'expectSafeMemoryCall',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function useVmFee(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'fee', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmFfi(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'ffi', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getLabel"`.
 */
export function useVmGetLabel(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'getLabel', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getMappingKeyAndParentOf"`.
 */
export function useVmGetMappingKeyAndParentOf(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'getMappingKeyAndParentOf',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getMappingLength"`.
 */
export function useVmGetMappingLength(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'getMappingLength',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getMappingSlotAt"`.
 */
export function useVmGetMappingSlotAt(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'getMappingSlotAt',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmGetNonce(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'getNonce', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmGetRecordedLogs(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isDir"`.
 */
export function useVmIsDir(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'isDir', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isFile"`.
 */
export function useVmIsFile(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'isFile', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function useVmLabel(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'label', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function useVmMakePersistent(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function useVmMockCall(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'mockCall', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCallRevert"`.
 */
export function useVmMockCallRevert(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'mockCallRevert',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function useVmPauseGasMetering(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'pauseGasMetering',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function useVmPrank(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'prank', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prevrandao"`.
 */
export function useVmPrevrandao(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'prevrandao', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readCallers"`.
 */
export function useVmReadCallers(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'readCallers',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function useVmRecord(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'record', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmRecordLogs(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'recordLogs', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmRememberKey(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeDir"`.
 */
export function useVmRemoveDir(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'removeDir', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmRemoveFile(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'removeFile', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resetNonce"`.
 */
export function useVmResetNonce(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'resetNonce', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function useVmResumeGasMetering(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'resumeGasMetering',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function useVmRevertTo(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'revertTo', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function useVmRevokePersistent(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function useVmRoll(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'roll', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function useVmRollFork(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'rollFork', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function useVmSelectFork(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'selectFork', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function useVmSerializeAddress(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'serializeAddress',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBool"`.
 */
export function useVmSerializeBool(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'serializeBool',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function useVmSerializeBytes(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function useVmSerializeBytes32(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeInt"`.
 */
export function useVmSerializeInt(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'serializeInt',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeJson"`.
 */
export function useVmSerializeJson(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'serializeJson',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeString"`.
 */
export function useVmSerializeString(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'serializeString',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeUint"`.
 */
export function useVmSerializeUint(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'serializeUint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSetEnv(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'setEnv', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function useVmSetNonce(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'setNonce', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonceUnsafe"`.
 */
export function useVmSetNonceUnsafe(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'setNonceUnsafe',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSign(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'sign', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"skip"`.
 */
export function useVmSkip(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'skip', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sleep"`.
 */
export function useVmSleep(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'sleep', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function useVmSnapshot(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'snapshot', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmStartBroadcast(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startMappingRecording"`.
 */
export function useVmStartMappingRecording(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'startMappingRecording',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function useVmStartPrank(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'startPrank', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmStopBroadcast(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopMappingRecording"`.
 */
export function useVmStopMappingRecording(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'stopMappingRecording',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function useVmStopPrank(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'stopPrank', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function useVmStore(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'store', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function useVmTransact(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'transact', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"tryFfi"`.
 */
export function useVmTryFfi(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'tryFfi', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"txGasPrice"`.
 */
export function useVmTxGasPrice(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'txGasPrice', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"unixTime"`.
 */
export function useVmUnixTime(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'unixTime', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function useVmWarp(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'warp', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmWriteFile(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'writeFile', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmWriteFileBinary(config = {}) {
  return useContractWrite({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeJson"`.
 */
export function useVmWriteJson(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'writeJson', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmWriteLine(config = {}) {
  return useContractWrite({ abi: vmABI, functionName: 'writeLine', ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function usePrepareVmWrite(config = {}) {
  return usePrepareContractWrite({ abi: vmABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmAccesses(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'accesses',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function usePrepareVmAllowCheatcodes(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"breakpoint"`.
 */
export function usePrepareVmBreakpoint(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'breakpoint',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmBroadcast(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'broadcast',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function usePrepareVmChainId(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'chainId',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function usePrepareVmClearMockedCalls(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmCloseFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'closeFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function usePrepareVmCoinbase(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'coinbase',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"copyFile"`.
 */
export function usePrepareVmCopyFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'copyFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createDir"`.
 */
export function usePrepareVmCreateDir(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createDir',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function usePrepareVmCreateFork(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createFork',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function usePrepareVmCreateSelectFork(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createWallet"`.
 */
export function usePrepareVmCreateWallet(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createWallet',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function usePrepareVmDeal(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'deal',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function usePrepareVmDifficulty(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'difficulty',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envOr"`.
 */
export function usePrepareVmEnvOr(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envOr',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function usePrepareVmEtch(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'etch',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"exists"`.
 */
export function usePrepareVmExists(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'exists',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function usePrepareVmExpectCall(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCallMinGas"`.
 */
export function usePrepareVmExpectCallMinGas(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectCallMinGas',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function usePrepareVmExpectEmit(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectEmit',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function usePrepareVmExpectRevert(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectSafeMemory"`.
 */
export function usePrepareVmExpectSafeMemory(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectSafeMemory',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectSafeMemoryCall"`.
 */
export function usePrepareVmExpectSafeMemoryCall(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectSafeMemoryCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function usePrepareVmFee(config = {}) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'fee', ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmFfi(config = {}) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'ffi', ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getLabel"`.
 */
export function usePrepareVmGetLabel(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getLabel',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getMappingKeyAndParentOf"`.
 */
export function usePrepareVmGetMappingKeyAndParentOf(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getMappingKeyAndParentOf',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getMappingLength"`.
 */
export function usePrepareVmGetMappingLength(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getMappingLength',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getMappingSlotAt"`.
 */
export function usePrepareVmGetMappingSlotAt(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getMappingSlotAt',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getNonce"`.
 */
export function usePrepareVmGetNonce(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getNonce',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmGetRecordedLogs(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isDir"`.
 */
export function usePrepareVmIsDir(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'isDir',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isFile"`.
 */
export function usePrepareVmIsFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'isFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmLabel(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'label',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function usePrepareVmMakePersistent(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function usePrepareVmMockCall(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'mockCall',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCallRevert"`.
 */
export function usePrepareVmMockCallRevert(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'mockCallRevert',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function usePrepareVmPauseGasMetering(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'pauseGasMetering',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function usePrepareVmPrank(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'prank',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prevrandao"`.
 */
export function usePrepareVmPrevrandao(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'prevrandao',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readCallers"`.
 */
export function usePrepareVmReadCallers(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'readCallers',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmRecord(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'record',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmRecordLogs(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'recordLogs',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmRememberKey(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeDir"`.
 */
export function usePrepareVmRemoveDir(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'removeDir',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmRemoveFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'removeFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resetNonce"`.
 */
export function usePrepareVmResetNonce(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'resetNonce',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function usePrepareVmResumeGasMetering(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'resumeGasMetering',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function usePrepareVmRevertTo(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revertTo',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function usePrepareVmRevokePersistent(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function usePrepareVmRoll(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'roll',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function usePrepareVmRollFork(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rollFork',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function usePrepareVmSelectFork(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'selectFork',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function usePrepareVmSerializeAddress(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeAddress',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBool"`.
 */
export function usePrepareVmSerializeBool(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBool',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function usePrepareVmSerializeBytes(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function usePrepareVmSerializeBytes32(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes32',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeInt"`.
 */
export function usePrepareVmSerializeInt(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeInt',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeJson"`.
 */
export function usePrepareVmSerializeJson(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeJson',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeString"`.
 */
export function usePrepareVmSerializeString(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeString',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeUint"`.
 */
export function usePrepareVmSerializeUint(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeUint',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSetEnv(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setEnv',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function usePrepareVmSetNonce(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setNonce',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonceUnsafe"`.
 */
export function usePrepareVmSetNonceUnsafe(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setNonceUnsafe',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sign"`.
 */
export function usePrepareVmSign(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'sign',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"skip"`.
 */
export function usePrepareVmSkip(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'skip',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sleep"`.
 */
export function usePrepareVmSleep(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'sleep',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function usePrepareVmSnapshot(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'snapshot',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmStartBroadcast(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startMappingRecording"`.
 */
export function usePrepareVmStartMappingRecording(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startMappingRecording',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function usePrepareVmStartPrank(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startPrank',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmStopBroadcast(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopMappingRecording"`.
 */
export function usePrepareVmStopMappingRecording(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopMappingRecording',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function usePrepareVmStopPrank(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopPrank',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function usePrepareVmStore(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'store',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function usePrepareVmTransact(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'transact',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"tryFfi"`.
 */
export function usePrepareVmTryFfi(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'tryFfi',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"txGasPrice"`.
 */
export function usePrepareVmTxGasPrice(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'txGasPrice',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"unixTime"`.
 */
export function usePrepareVmUnixTime(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'unixTime',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function usePrepareVmWarp(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'warp',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmWriteFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmWriteFileBinary(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeJson"`.
 */
export function usePrepareVmWriteJson(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeJson',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmWriteLine(config = {}) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeLine',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafeRead(config = {}) {
  return useContractRead({ abi: vmSafeABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafeWrite(config = {}) {
  return useContractWrite({ abi: vmSafeABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmSafeAccesses(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'accesses',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"breakpoint"`.
 */
export function useVmSafeBreakpoint(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'breakpoint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmSafeBroadcast(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'broadcast',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmSafeCloseFile(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'closeFile',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"copyFile"`.
 */
export function useVmSafeCopyFile(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'copyFile',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"createDir"`.
 */
export function useVmSafeCreateDir(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'createDir',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"createWallet"`.
 */
export function useVmSafeCreateWallet(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'createWallet',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envOr"`.
 */
export function useVmSafeEnvOr(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'envOr', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"exists"`.
 */
export function useVmSafeExists(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'exists', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmSafeFfi(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'ffi', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getLabel"`.
 */
export function useVmSafeGetLabel(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'getLabel',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getMappingKeyAndParentOf"`.
 */
export function useVmSafeGetMappingKeyAndParentOf(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'getMappingKeyAndParentOf',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getMappingLength"`.
 */
export function useVmSafeGetMappingLength(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'getMappingLength',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getMappingSlotAt"`.
 */
export function useVmSafeGetMappingSlotAt(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'getMappingSlotAt',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmSafeGetNonce(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'getNonce',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmSafeGetRecordedLogs(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'getRecordedLogs',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"isDir"`.
 */
export function useVmSafeIsDir(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'isDir', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"isFile"`.
 */
export function useVmSafeIsFile(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'isFile', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"label"`.
 */
export function useVmSafeLabel(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'label', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function useVmSafePauseGasMetering(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'pauseGasMetering',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"record"`.
 */
export function useVmSafeRecord(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'record', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmSafeRecordLogs(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'recordLogs',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmSafeRememberKey(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'rememberKey',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeDir"`.
 */
export function useVmSafeRemoveDir(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'removeDir',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmSafeRemoveFile(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'removeFile',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function useVmSafeResumeGasMetering(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'resumeGasMetering',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function useVmSafeSerializeAddress(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeAddress',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBool"`.
 */
export function useVmSafeSerializeBool(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBool',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function useVmSafeSerializeBytes(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function useVmSafeSerializeBytes32(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeInt"`.
 */
export function useVmSafeSerializeInt(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeInt',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeJson"`.
 */
export function useVmSafeSerializeJson(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeJson',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeString"`.
 */
export function useVmSafeSerializeString(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeString',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeUint"`.
 */
export function useVmSafeSerializeUint(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeUint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSafeSetEnv(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'setEnv', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSafeSign(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'sign', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"sleep"`.
 */
export function useVmSafeSleep(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'sleep', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmSafeStartBroadcast(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'startBroadcast',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startMappingRecording"`.
 */
export function useVmSafeStartMappingRecording(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'startMappingRecording',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmSafeStopBroadcast(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'stopBroadcast',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopMappingRecording"`.
 */
export function useVmSafeStopMappingRecording(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'stopMappingRecording',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"tryFfi"`.
 */
export function useVmSafeTryFfi(config = {}) {
  return useContractWrite({ abi: vmSafeABI, functionName: 'tryFfi', ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"unixTime"`.
 */
export function useVmSafeUnixTime(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'unixTime',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmSafeWriteFile(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFile',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmSafeWriteFileBinary(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFileBinary',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeJson"`.
 */
export function useVmSafeWriteJson(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'writeJson',
    ...config,
  })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmSafeWriteLine(config = {}) {
  return useContractWrite({
    abi: vmSafeABI,
    functionName: 'writeLine',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function usePrepareVmSafeWrite(config = {}) {
  return usePrepareContractWrite({ abi: vmSafeABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmSafeAccesses(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'accesses',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"breakpoint"`.
 */
export function usePrepareVmSafeBreakpoint(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'breakpoint',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmSafeBroadcast(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'broadcast',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmSafeCloseFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'closeFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"copyFile"`.
 */
export function usePrepareVmSafeCopyFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'copyFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"createDir"`.
 */
export function usePrepareVmSafeCreateDir(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'createDir',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"createWallet"`.
 */
export function usePrepareVmSafeCreateWallet(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'createWallet',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envOr"`.
 */
export function usePrepareVmSafeEnvOr(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'envOr',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"exists"`.
 */
export function usePrepareVmSafeExists(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'exists',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmSafeFfi(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'ffi',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getLabel"`.
 */
export function usePrepareVmSafeGetLabel(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getLabel',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getMappingKeyAndParentOf"`.
 */
export function usePrepareVmSafeGetMappingKeyAndParentOf(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getMappingKeyAndParentOf',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getMappingLength"`.
 */
export function usePrepareVmSafeGetMappingLength(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getMappingLength',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getMappingSlotAt"`.
 */
export function usePrepareVmSafeGetMappingSlotAt(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getMappingSlotAt',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getNonce"`.
 */
export function usePrepareVmSafeGetNonce(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getNonce',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmSafeGetRecordedLogs(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getRecordedLogs',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"isDir"`.
 */
export function usePrepareVmSafeIsDir(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'isDir',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"isFile"`.
 */
export function usePrepareVmSafeIsFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'isFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmSafeLabel(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'label',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function usePrepareVmSafePauseGasMetering(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'pauseGasMetering',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmSafeRecord(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'record',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmSafeRecordLogs(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'recordLogs',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmSafeRememberKey(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'rememberKey',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeDir"`.
 */
export function usePrepareVmSafeRemoveDir(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'removeDir',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmSafeRemoveFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'removeFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function usePrepareVmSafeResumeGasMetering(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'resumeGasMetering',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function usePrepareVmSafeSerializeAddress(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeAddress',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBool"`.
 */
export function usePrepareVmSafeSerializeBool(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBool',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function usePrepareVmSafeSerializeBytes(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function usePrepareVmSafeSerializeBytes32(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes32',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeInt"`.
 */
export function usePrepareVmSafeSerializeInt(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeInt',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeJson"`.
 */
export function usePrepareVmSafeSerializeJson(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeJson',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeString"`.
 */
export function usePrepareVmSafeSerializeString(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeString',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeUint"`.
 */
export function usePrepareVmSafeSerializeUint(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeUint',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSafeSetEnv(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'setEnv',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"sign"`.
 */
export function usePrepareVmSafeSign(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'sign',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"sleep"`.
 */
export function usePrepareVmSafeSleep(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'sleep',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmSafeStartBroadcast(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'startBroadcast',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startMappingRecording"`.
 */
export function usePrepareVmSafeStartMappingRecording(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'startMappingRecording',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmSafeStopBroadcast(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'stopBroadcast',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopMappingRecording"`.
 */
export function usePrepareVmSafeStopMappingRecording(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'stopMappingRecording',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"tryFfi"`.
 */
export function usePrepareVmSafeTryFfi(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'tryFfi',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"unixTime"`.
 */
export function usePrepareVmSafeUnixTime(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'unixTime',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmSafeWriteFile(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFile',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmSafeWriteFileBinary(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFileBinary',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeJson"`.
 */
export function usePrepareVmSafeWriteJson(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeJson',
    ...config,
  })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmSafeWriteLine(config = {}) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeLine',
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822ProxiableRead(config = {}) {
  return useContractRead({ abi: ierc1822ProxiableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestRead(config = {}) {
  return useContractRead({ abi: dsTestABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestWrite(config = {}) {
  return useContractWrite({ abi: dsTestABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"failed"`.
 */
export function useDsTestFailed(config = {}) {
  return useContractWrite({ abi: dsTestABI, functionName: 'failed', ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__.
 */
export function usePrepareDsTestWrite(config = {}) {
  return usePrepareContractWrite({ abi: dsTestABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareDsTestFailed(config = {}) {
  return usePrepareContractWrite({
    abi: dsTestABI,
    functionName: 'failed',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestEvent(config = {}) {
  return useContractEvent({ abi: dsTestABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log"`.
 */
export function useDsTestLogEvent(config = {}) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useDsTestLogAddressEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_address',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useDsTestLogBytesEvent(config = {}) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_bytes', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useDsTestLogBytes32Event(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_bytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useDsTestLogIntEvent(config = {}) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_int', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useDsTestLogNamedAddressEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_address',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useDsTestLogNamedBytesEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_bytes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useDsTestLogNamedBytes32Event(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_bytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useDsTestLogNamedDecimalIntEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useDsTestLogNamedDecimalUintEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useDsTestLogNamedIntEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useDsTestLogNamedStringEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_string',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useDsTestLogNamedUintEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useDsTestLogStringEvent(config = {}) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_string',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useDsTestLogUintEvent(config = {}) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_uint', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"logs"`.
 */
export function useDsTestLogsEvent(config = {}) {
  return useContractEvent({ abi: dsTestABI, eventName: 'logs', ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__.
 */
export function useTestRead(config = {}) {
  return useContractRead({ abi: testABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function useTestWrite(config = {}) {
  return useContractWrite({ abi: testABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function useTestFailed(config = {}) {
  return useContractWrite({ abi: testABI, functionName: 'failed', ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function usePrepareTestWrite(config = {}) {
  return usePrepareContractWrite({ abi: testABI, ...config })
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareTestFailed(config = {}) {
  return usePrepareContractWrite({
    abi: testABI,
    functionName: 'failed',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__.
 */
export function useTestEvent(config = {}) {
  return useContractEvent({ abi: testABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log"`.
 */
export function useTestLogEvent(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'log', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_address"`.
 */
export function useTestLogAddressEvent(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'log_address', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_array"`.
 */
export function useTestLogArrayEvent(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'log_array', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTestLogBytesEvent(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'log_bytes', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTestLogBytes32Event(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'log_bytes32', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_int"`.
 */
export function useTestLogIntEvent(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'log_int', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTestLogNamedAddressEvent(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_address',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTestLogNamedArrayEvent(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_array',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTestLogNamedBytesEvent(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_bytes',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTestLogNamedBytes32Event(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_bytes32',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTestLogNamedDecimalIntEvent(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_decimal_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTestLogNamedDecimalUintEvent(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTestLogNamedIntEvent(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_int',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTestLogNamedStringEvent(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_string',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTestLogNamedUintEvent(config = {}) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_uint',
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_string"`.
 */
export function useTestLogStringEvent(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'log_string', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTestLogUintEvent(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'log_uint', ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"logs"`.
 */
export function useTestLogsEvent(config = {}) {
  return useContractEvent({ abi: testABI, eventName: 'logs', ...config })
}
